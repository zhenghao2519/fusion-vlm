2025-03-02 00:02:47,985 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.9.21 (main, Dec 11 2024, 16:24:11) [GCC 11.2.0]
CUDA available: True
GPU 0: NVIDIA GeForce RTX 3090 Ti
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.8, V11.8.89
GCC: gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
PyTorch: 1.13.1
PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.14.1
OpenCV: 4.11.0
MMCV: 1.6.2
MMCV Compiler: GCC 11.4
MMCV CUDA Compiler: 11.8
MMDetection: 2.28.2
MMSegmentation: 0.30.0
MMDetection3D: 1.0.0rc6+7175f0d
spconv2.0: True
------------------------------------------------------------

2025-03-02 00:02:48,684 - mmdet - INFO - Distributed training: True
2025-03-02 00:02:49,455 - mmdet - INFO - Config:
point_cloud_range = [-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]
class_names = [
    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',
    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
]
dataset_type = 'CustomNuScenesDataset'
data_root = './data/nuscenes/'
input_modality = dict(
    use_lidar=False,
    use_camera=True,
    use_radar=False,
    use_map=False,
    use_external=True)
file_client_args = dict(backend='disk')
train_pipeline = [
    dict(type='LoadMultiViewImageFromFiles', to_float32=True),
    dict(
        type='LoadAnnotations3D',
        with_bbox_3d=True,
        with_label_3d=True,
        with_bbox=True,
        with_label=True,
        with_bbox_depth=True),
    dict(
        type='ObjectRangeFilter',
        point_cloud_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]),
    dict(
        type='ObjectNameFilter',
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(
        type='ResizeCropFlipRotImage',
        data_aug_conf=dict(
            resize_lim=(0.37, 0.45),
            final_dim=(320, 640),
            bot_pct_lim=(0.0, 0.0),
            rot_lim=(0.0, 0.0),
            H=900,
            W=1600,
            rand_flip=False),
        training=True),
    dict(
        type='ResizeMultiview3D',
        img_scale=(640, 640),
        keep_ratio=False,
        multiscale_mode='value'),
    dict(
        type='LoadAnnoatationVQA',
        base_vqa_path='./data/nuscenes/vqa/train/',
        base_desc_path='./data/nuscenes/desc/train/',
        base_conv_path='./data/nuscenes/conv/train/',
        base_key_path='./data/nuscenes/keywords/train/',
        tokenizer='ckpts/pretrain_qformer/',
        max_length=2048,
        ignore_type=[],
        lane_objs_info='./data/nuscenes/lane_obj_train.pkl'),
    dict(
        type='NormalizeMultiviewImage',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='PadMultiViewImage', size_divisor=32),
    dict(
        type='PETRFormatBundle3D',
        class_names=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        collect_keys=[
            'lidar2img', 'intrinsics', 'extrinsics', 'timestamp',
            'img_timestamp', 'ego_pose', 'ego_pose_inv', 'command', 'can_bus',
            'prev_exists'
        ]),
    dict(
        type='Collect3D',
        keys=[
            'lane_pts', 'input_ids', 'vlm_labels', 'gt_bboxes_3d',
            'gt_labels_3d', 'img', 'gt_bboxes', 'gt_labels', 'centers2d',
            'depths', 'prev_exists', 'lidar2img', 'intrinsics', 'extrinsics',
            'timestamp', 'img_timestamp', 'ego_pose', 'ego_pose_inv',
            'command', 'can_bus'
        ],
        meta_keys=('filename', 'ori_shape', 'img_shape', 'pad_shape',
                   'scale_factor', 'flip', 'box_mode_3d', 'box_type_3d',
                   'img_norm_cfg', 'scene_token', 'gt_bboxes_3d',
                   'gt_labels_3d'))
]
test_pipeline = [
    dict(type='LoadMultiViewImageFromFiles', to_float32=True),
    dict(
        type='ResizeCropFlipRotImage',
        data_aug_conf=dict(
            resize_lim=(0.37, 0.45),
            final_dim=(320, 640),
            bot_pct_lim=(0.0, 0.0),
            rot_lim=(0.0, 0.0),
            H=900,
            W=1600,
            rand_flip=False),
        training=False),
    dict(
        type='ResizeMultiview3D',
        img_scale=(640, 640),
        keep_ratio=False,
        multiscale_mode='value'),
    dict(
        type='NormalizeMultiviewImage',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        to_rgb=True),
    dict(type='PadMultiViewImage', size_divisor=32),
    dict(
        type='LoadAnnoatationVQATest',
        base_vqa_path='./data/nuscenes/vqa/val/',
        base_conv_path='./data/nuscenes/conv/val/',
        base_counter_path='./data/nuscenes/eval_cf/',
        load_type=['planning'],
        tokenizer='ckpts/pretrain_qformer/',
        max_length=2048),
    dict(
        type='MultiScaleFlipAug3D',
        img_scale=(1333, 800),
        pts_scale_ratio=1,
        flip=False,
        transforms=[
            dict(
                type='PETRFormatBundle3D',
                collect_keys=[
                    'lidar2img', 'intrinsics', 'extrinsics', 'timestamp',
                    'img_timestamp', 'ego_pose', 'ego_pose_inv', 'command',
                    'can_bus'
                ],
                class_names=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ],
                with_label=False),
            dict(
                type='Collect3D',
                keys=[
                    'input_ids', 'img', 'lidar2img', 'intrinsics',
                    'extrinsics', 'timestamp', 'img_timestamp', 'ego_pose',
                    'ego_pose_inv', 'command', 'can_bus'
                ],
                meta_keys=('sample_idx', 'vlm_labels', 'filename', 'ori_shape',
                           'img_shape', 'pad_shape', 'scale_factor', 'flip',
                           'box_mode_3d', 'box_type_3d', 'img_norm_cfg',
                           'scene_token'))
        ])
]
eval_pipeline = [
    dict(
        type='LoadPointsFromFile',
        coord_type='LIDAR',
        load_dim=5,
        use_dim=5,
        file_client_args=dict(backend='disk')),
    dict(
        type='LoadPointsFromMultiSweeps',
        sweeps_num=10,
        file_client_args=dict(backend='disk')),
    dict(
        type='DefaultFormatBundle3D',
        class_names=[
            'car', 'truck', 'trailer', 'bus', 'construction_vehicle',
            'bicycle', 'motorcycle', 'pedestrian', 'traffic_cone', 'barrier'
        ],
        with_label=False),
    dict(type='Collect3D', keys=['points'])
]
data = dict(
    samples_per_gpu=2,
    workers_per_gpu=2,
    train=dict(
        type='CustomNuScenesDataset',
        data_root='./data/nuscenes/',
        ann_file='./data/nuscenes/nuscenes2d_ego_temporal_infos_train.pkl',
        pipeline=[
            dict(type='LoadMultiViewImageFromFiles', to_float32=True),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True,
                with_bbox=True,
                with_label=True,
                with_bbox_depth=True),
            dict(
                type='ObjectRangeFilter',
                point_cloud_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]),
            dict(
                type='ObjectNameFilter',
                classes=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ]),
            dict(
                type='ResizeCropFlipRotImage',
                data_aug_conf=dict(
                    resize_lim=(0.37, 0.45),
                    final_dim=(320, 640),
                    bot_pct_lim=(0.0, 0.0),
                    rot_lim=(0.0, 0.0),
                    H=900,
                    W=1600,
                    rand_flip=False),
                training=True),
            dict(
                type='ResizeMultiview3D',
                img_scale=(640, 640),
                keep_ratio=False,
                multiscale_mode='value'),
            dict(
                type='LoadAnnoatationVQA',
                base_vqa_path='./data/nuscenes/vqa/train/',
                base_desc_path='./data/nuscenes/desc/train/',
                base_conv_path='./data/nuscenes/conv/train/',
                base_key_path='./data/nuscenes/keywords/train/',
                tokenizer='ckpts/pretrain_qformer/',
                max_length=2048,
                ignore_type=[],
                lane_objs_info='./data/nuscenes/lane_obj_train.pkl'),
            dict(
                type='NormalizeMultiviewImage',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='PadMultiViewImage', size_divisor=32),
            dict(
                type='PETRFormatBundle3D',
                class_names=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ],
                collect_keys=[
                    'lidar2img', 'intrinsics', 'extrinsics', 'timestamp',
                    'img_timestamp', 'ego_pose', 'ego_pose_inv', 'command',
                    'can_bus', 'prev_exists'
                ]),
            dict(
                type='Collect3D',
                keys=[
                    'lane_pts', 'input_ids', 'vlm_labels', 'gt_bboxes_3d',
                    'gt_labels_3d', 'img', 'gt_bboxes', 'gt_labels',
                    'centers2d', 'depths', 'prev_exists', 'lidar2img',
                    'intrinsics', 'extrinsics', 'timestamp', 'img_timestamp',
                    'ego_pose', 'ego_pose_inv', 'command', 'can_bus'
                ],
                meta_keys=('filename', 'ori_shape', 'img_shape', 'pad_shape',
                           'scale_factor', 'flip', 'box_mode_3d',
                           'box_type_3d', 'img_norm_cfg', 'scene_token',
                           'gt_bboxes_3d', 'gt_labels_3d'))
        ],
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=False,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=True),
        test_mode=False,
        box_type_3d='LiDAR',
        seq_split_num=1,
        seq_mode=True,
        use_valid_flag=True,
        filter_empty_gt=False),
    val=dict(
        type='CustomNuScenesDataset',
        data_root='data/nuscenes/',
        ann_file='./data/nuscenes/nuscenes2d_ego_temporal_infos_val.pkl',
        pipeline=[
            dict(type='LoadMultiViewImageFromFiles', to_float32=True),
            dict(
                type='ResizeCropFlipRotImage',
                data_aug_conf=dict(
                    resize_lim=(0.37, 0.45),
                    final_dim=(320, 640),
                    bot_pct_lim=(0.0, 0.0),
                    rot_lim=(0.0, 0.0),
                    H=900,
                    W=1600,
                    rand_flip=False),
                training=False),
            dict(
                type='ResizeMultiview3D',
                img_scale=(640, 640),
                keep_ratio=False,
                multiscale_mode='value'),
            dict(
                type='NormalizeMultiviewImage',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='PadMultiViewImage', size_divisor=32),
            dict(
                type='LoadAnnoatationVQATest',
                base_vqa_path='./data/nuscenes/vqa/val/',
                base_conv_path='./data/nuscenes/conv/val/',
                base_counter_path='./data/nuscenes/eval_cf/',
                load_type=['planning'],
                tokenizer='ckpts/pretrain_qformer/',
                max_length=2048),
            dict(
                type='MultiScaleFlipAug3D',
                img_scale=(1333, 800),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type='PETRFormatBundle3D',
                        collect_keys=[
                            'lidar2img', 'intrinsics', 'extrinsics',
                            'timestamp', 'img_timestamp', 'ego_pose',
                            'ego_pose_inv', 'command', 'can_bus'
                        ],
                        class_names=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        with_label=False),
                    dict(
                        type='Collect3D',
                        keys=[
                            'input_ids', 'img', 'lidar2img', 'intrinsics',
                            'extrinsics', 'timestamp', 'img_timestamp',
                            'ego_pose', 'ego_pose_inv', 'command', 'can_bus'
                        ],
                        meta_keys=('sample_idx', 'vlm_labels', 'filename',
                                   'ori_shape', 'img_shape', 'pad_shape',
                                   'scale_factor', 'flip', 'box_mode_3d',
                                   'box_type_3d', 'img_norm_cfg',
                                   'scene_token'))
                ])
        ],
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=False,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=True),
        test_mode=True,
        box_type_3d='LiDAR',
        eval_mode=['lane', 'det']),
    test=dict(
        type='CustomNuScenesDataset',
        data_root='data/nuscenes/',
        ann_file='./data/nuscenes/nuscenes2d_ego_temporal_infos_val.pkl',
        pipeline=[
            dict(type='LoadMultiViewImageFromFiles', to_float32=True),
            dict(
                type='ResizeCropFlipRotImage',
                data_aug_conf=dict(
                    resize_lim=(0.37, 0.45),
                    final_dim=(320, 640),
                    bot_pct_lim=(0.0, 0.0),
                    rot_lim=(0.0, 0.0),
                    H=900,
                    W=1600,
                    rand_flip=False),
                training=False),
            dict(
                type='ResizeMultiview3D',
                img_scale=(640, 640),
                keep_ratio=False,
                multiscale_mode='value'),
            dict(
                type='NormalizeMultiviewImage',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='PadMultiViewImage', size_divisor=32),
            dict(
                type='LoadAnnoatationVQATest',
                base_vqa_path='./data/nuscenes/vqa/val/',
                base_conv_path='./data/nuscenes/conv/val/',
                base_counter_path='./data/nuscenes/eval_cf/',
                load_type=['planning'],
                tokenizer='ckpts/pretrain_qformer/',
                max_length=2048),
            dict(
                type='MultiScaleFlipAug3D',
                img_scale=(1333, 800),
                pts_scale_ratio=1,
                flip=False,
                transforms=[
                    dict(
                        type='PETRFormatBundle3D',
                        collect_keys=[
                            'lidar2img', 'intrinsics', 'extrinsics',
                            'timestamp', 'img_timestamp', 'ego_pose',
                            'ego_pose_inv', 'command', 'can_bus'
                        ],
                        class_names=[
                            'car', 'truck', 'construction_vehicle', 'bus',
                            'trailer', 'barrier', 'motorcycle', 'bicycle',
                            'pedestrian', 'traffic_cone'
                        ],
                        with_label=False),
                    dict(
                        type='Collect3D',
                        keys=[
                            'input_ids', 'img', 'lidar2img', 'intrinsics',
                            'extrinsics', 'timestamp', 'img_timestamp',
                            'ego_pose', 'ego_pose_inv', 'command', 'can_bus'
                        ],
                        meta_keys=('sample_idx', 'vlm_labels', 'filename',
                                   'ori_shape', 'img_shape', 'pad_shape',
                                   'scale_factor', 'flip', 'box_mode_3d',
                                   'box_type_3d', 'img_norm_cfg',
                                   'scene_token'))
                ])
        ],
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=False,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=True),
        test_mode=True,
        box_type_3d='LiDAR',
        eval_mode=['lane', 'det']),
    shuffler_sampler=dict(
        type='InfiniteGroupEachSampleInBatchSampler',
        seq_split_num=2,
        warmup_split_num=10,
        num_iters_to_seq=14065),
    nonshuffler_sampler=dict(type='DistributedSampler'))
evaluation = dict(
    interval=84390,
    pipeline=[
        dict(type='LoadMultiViewImageFromFiles', to_float32=True),
        dict(
            type='ResizeCropFlipRotImage',
            data_aug_conf=dict(
                resize_lim=(0.37, 0.45),
                final_dim=(320, 640),
                bot_pct_lim=(0.0, 0.0),
                rot_lim=(0.0, 0.0),
                H=900,
                W=1600,
                rand_flip=False),
            training=False),
        dict(
            type='ResizeMultiview3D',
            img_scale=(640, 640),
            keep_ratio=False,
            multiscale_mode='value'),
        dict(
            type='NormalizeMultiviewImage',
            mean=[123.675, 116.28, 103.53],
            std=[58.395, 57.12, 57.375],
            to_rgb=True),
        dict(type='PadMultiViewImage', size_divisor=32),
        dict(
            type='LoadAnnoatationVQATest',
            base_vqa_path='./data/nuscenes/vqa/val/',
            base_conv_path='./data/nuscenes/conv/val/',
            base_counter_path='./data/nuscenes/eval_cf/',
            load_type=['planning'],
            tokenizer='ckpts/pretrain_qformer/',
            max_length=2048),
        dict(
            type='MultiScaleFlipAug3D',
            img_scale=(1333, 800),
            pts_scale_ratio=1,
            flip=False,
            transforms=[
                dict(
                    type='PETRFormatBundle3D',
                    collect_keys=[
                        'lidar2img', 'intrinsics', 'extrinsics', 'timestamp',
                        'img_timestamp', 'ego_pose', 'ego_pose_inv', 'command',
                        'can_bus'
                    ],
                    class_names=[
                        'car', 'truck', 'construction_vehicle', 'bus',
                        'trailer', 'barrier', 'motorcycle', 'bicycle',
                        'pedestrian', 'traffic_cone'
                    ],
                    with_label=False),
                dict(
                    type='Collect3D',
                    keys=[
                        'input_ids', 'img', 'lidar2img', 'intrinsics',
                        'extrinsics', 'timestamp', 'img_timestamp', 'ego_pose',
                        'ego_pose_inv', 'command', 'can_bus'
                    ],
                    meta_keys=('sample_idx', 'vlm_labels', 'filename',
                               'ori_shape', 'img_shape', 'pad_shape',
                               'scale_factor', 'flip', 'box_mode_3d',
                               'box_type_3d', 'img_norm_cfg', 'scene_token'))
            ])
    ])
checkpoint_config = dict(interval=7032, max_keep_ckpts=3)
log_config = dict(
    interval=50,
    hooks=[dict(type='TextLoggerHook'),
           dict(type='TensorboardLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
work_dir = 'work_dirs/mask_eva_lane_det_vlm/'
load_from = 'ckpts/fcos3d_vovnet_imgbackbone-remapped.pth'
resume_from = None
workflow = [('train', 1)]
opencv_num_threads = 0
mp_start_method = 'fork'
backbone_norm_cfg = dict(type='LN', requires_grad=True)
plugin = True
plugin_dir = 'projects/mmdet3d_plugin/'
voxel_size = [0.2, 0.2, 8]
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
num_gpus = 1
batch_size = 2
num_iters_per_epoch = 14065
num_epochs = 6
llm_path = 'ckpts/pretrain_qformer/'
collect_keys = [
    'lidar2img', 'intrinsics', 'extrinsics', 'timestamp', 'img_timestamp',
    'ego_pose', 'ego_pose_inv', 'command', 'can_bus'
]
model = dict(
    type='Petr3D',
    save_path='./results_planning_only/',
    use_grid_mask=True,
    frozen=False,
    use_lora=True,
    tokenizer='ckpts/pretrain_qformer/',
    lm_head=None,
    img_backbone=dict(
        type='VoVNet',
        spec_name='V-99-eSE',
        norm_eval=True,
        frozen_stages=-1,
        input_ch=3,
        out_features='stage4'),
    img_neck=dict(
        type='CPFPN', in_channels=[768], out_channels=256, num_outs=2),
    map_head=dict(
        type='PETRHeadM',
        num_classes=1,
        in_channels=256,
        out_dims=4096,
        memory_len=600,
        with_mask=True,
        topk_proposals=300,
        num_lane=1800,
        num_lanes_one2one=300,
        k_one2many=5,
        lambda_one2many=1.0,
        num_extra=256,
        n_control=11,
        pc_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0],
        code_weights=[1.0, 1.0],
        transformer=dict(
            type='PETRTemporalTransformer',
            input_dimension=256,
            output_dimension=256,
            num_layers=6,
            embed_dims=256,
            num_heads=8,
            feedforward_dims=2048,
            dropout=0.1,
            with_cp=True,
            flash_attn=True),
        train_cfg=dict(
            assigner=dict(
                type='LaneHungarianAssigner',
                cls_cost=dict(type='FocalLossCost', weight=1.5),
                reg_cost=dict(type='LaneL1Cost', weight=0.02),
                iou_cost=dict(type='IoUCost', weight=0.0))),
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=1.5),
        loss_bbox=dict(type='L1Loss', loss_weight=0.02),
        loss_dir=dict(type='PtsDirCosLoss', loss_weight=0.0)),
    pts_bbox_head=dict(
        type='StreamPETRHead',
        num_classes=10,
        in_channels=256,
        out_dims=4096,
        num_query=600,
        with_mask=True,
        memory_len=600,
        topk_proposals=300,
        num_propagated=300,
        num_extra=256,
        n_control=11,
        match_with_velo=False,
        scalar=10,
        noise_scale=1.0,
        dn_weight=1.0,
        split=0.75,
        code_weights=[2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
        transformer=dict(
            type='PETRTemporalTransformer',
            input_dimension=256,
            output_dimension=256,
            num_layers=6,
            embed_dims=256,
            num_heads=8,
            feedforward_dims=2048,
            dropout=0.1,
            with_cp=True,
            flash_attn=True),
        bbox_coder=dict(
            type='NMSFreeCoder',
            post_center_range=[-61.2, -61.2, -10.0, 61.2, 61.2, 10.0],
            pc_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0],
            max_num=300,
            voxel_size=[0.2, 0.2, 8],
            num_classes=10),
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=2.0),
        loss_bbox=dict(type='L1Loss', loss_weight=0.25),
        loss_iou=dict(type='GIoULoss', loss_weight=0.0)),
    train_cfg=dict(
        pts=dict(
            grid_size=[512, 512, 1],
            voxel_size=[0.2, 0.2, 8],
            point_cloud_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0],
            out_size_factor=4,
            assigner=dict(
                type='HungarianAssigner3D',
                cls_cost=dict(type='FocalLossCost', weight=2.0),
                reg_cost=dict(type='BBox3DL1Cost', weight=0.25),
                iou_cost=dict(type='IoUCost', weight=0.0),
                pc_range=[-51.2, -51.2, -5.0, 51.2, 51.2, 3.0]))))
ida_aug_conf = dict(
    resize_lim=(0.37, 0.45),
    final_dim=(320, 640),
    bot_pct_lim=(0.0, 0.0),
    rot_lim=(0.0, 0.0),
    H=900,
    W=1600,
    rand_flip=False)
optimizer = dict(
    constructor='LearningRateDecayOptimizerConstructor',
    type='AdamW',
    lr=0.0001,
    betas=(0.9, 0.999),
    weight_decay=0.0001,
    paramwise_cfg=dict(
        decay_rate=0.9,
        head_decay_rate=4.0,
        lm_head_decay_rate=0.1,
        decay_type='vit_wise',
        num_layers=24))
optimizer_config = dict(
    type='Fp16OptimizerHook',
    loss_scale='dynamic',
    grad_clip=dict(max_norm=35, norm_type=2))
lr_config = dict(
    policy='CosineAnnealing',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.3333333333333333,
    min_lr_ratio=0.001)
find_unused_parameters = False
runner = dict(type='IterBasedRunner', max_iters=84390)
gpu_ids = range(0, 1)

2025-03-02 00:02:49,456 - mmdet - INFO - Set random seed to 0, deterministic: False
2025-03-02 00:02:49,819 - mmdet - INFO - initialize CPFPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
Name of parameter - Initialization information

position_range - torch.Size([6]): 
The value is the same before and after calling `init_weights` of Petr3D  

coords_d - torch.Size([64]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.code_weights - torch.Size([10]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.match_costs - torch.Size([10]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.pc_range - torch.Size([6]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.cls_branches.0.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.cls_branches.0.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.cls_branches.0.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.cls_branches.0.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.cls_branches.0.3.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.cls_branches.0.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.cls_branches.0.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.cls_branches.0.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.cls_branches.0.6.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.cls_branches.0.6.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in StreamPETRHead  

pts_bbox_head.reg_branches.0.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.reg_branches.0.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.reg_branches.0.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.reg_branches.0.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.reg_branches.0.4.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.reg_branches.0.4.bias - torch.Size([10]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.input_projection.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.input_projection.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.output_projection.weight - torch.Size([4096, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.output_projection.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.reference_points.weight - torch.Size([600, 3]): 
Initialized by user-defined `init_weights` in StreamPETRHead  

pts_bbox_head.pseudo_reference_points.weight - torch.Size([300, 3]): 
Initialized by user-defined `init_weights` in StreamPETRHead  

pts_bbox_head.query_embedding.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.can_bus_embed.0.weight - torch.Size([1024, 74]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.can_bus_embed.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.can_bus_embed.2.weight - torch.Size([4096, 1024]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.can_bus_embed.2.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.0.transformer_layers.0.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.0.transformer_layers.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.0.transformer_layers.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in StreamPETRHead  

pts_bbox_head.transformer.query_decoder._layers.0.transformer_layers.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.0.transformer_layers.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.0.transformer_layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.0.transformer_layers.2.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.0.transformer_layers.2.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.0.transformer_layers.2.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in StreamPETRHead  

pts_bbox_head.transformer.query_decoder._layers.0.transformer_layers.2.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.0.transformer_layers.3.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.0.transformer_layers.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.0.transformer_layers.4._layers.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in StreamPETRHead  

pts_bbox_head.transformer.query_decoder._layers.0.transformer_layers.4._layers.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.0.transformer_layers.4._layers.3.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in StreamPETRHead  

pts_bbox_head.transformer.query_decoder._layers.0.transformer_layers.4._layers.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.0.transformer_layers.5.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.0.transformer_layers.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.1.transformer_layers.0.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.1.transformer_layers.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.1.transformer_layers.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in StreamPETRHead  

pts_bbox_head.transformer.query_decoder._layers.1.transformer_layers.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.1.transformer_layers.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.1.transformer_layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.1.transformer_layers.2.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.1.transformer_layers.2.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.1.transformer_layers.2.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in StreamPETRHead  

pts_bbox_head.transformer.query_decoder._layers.1.transformer_layers.2.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.1.transformer_layers.3.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.1.transformer_layers.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.1.transformer_layers.4._layers.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in StreamPETRHead  

pts_bbox_head.transformer.query_decoder._layers.1.transformer_layers.4._layers.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.1.transformer_layers.4._layers.3.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in StreamPETRHead  

pts_bbox_head.transformer.query_decoder._layers.1.transformer_layers.4._layers.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.1.transformer_layers.5.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.1.transformer_layers.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.2.transformer_layers.0.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.2.transformer_layers.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.2.transformer_layers.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in StreamPETRHead  

pts_bbox_head.transformer.query_decoder._layers.2.transformer_layers.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.2.transformer_layers.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.2.transformer_layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.2.transformer_layers.2.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.2.transformer_layers.2.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.2.transformer_layers.2.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in StreamPETRHead  

pts_bbox_head.transformer.query_decoder._layers.2.transformer_layers.2.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.2.transformer_layers.3.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.2.transformer_layers.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.2.transformer_layers.4._layers.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in StreamPETRHead  

pts_bbox_head.transformer.query_decoder._layers.2.transformer_layers.4._layers.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.2.transformer_layers.4._layers.3.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in StreamPETRHead  

pts_bbox_head.transformer.query_decoder._layers.2.transformer_layers.4._layers.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.2.transformer_layers.5.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.2.transformer_layers.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.3.transformer_layers.0.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.3.transformer_layers.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.3.transformer_layers.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in StreamPETRHead  

pts_bbox_head.transformer.query_decoder._layers.3.transformer_layers.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.3.transformer_layers.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.3.transformer_layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.3.transformer_layers.2.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.3.transformer_layers.2.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.3.transformer_layers.2.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in StreamPETRHead  

pts_bbox_head.transformer.query_decoder._layers.3.transformer_layers.2.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.3.transformer_layers.3.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.3.transformer_layers.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.3.transformer_layers.4._layers.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in StreamPETRHead  

pts_bbox_head.transformer.query_decoder._layers.3.transformer_layers.4._layers.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.3.transformer_layers.4._layers.3.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in StreamPETRHead  

pts_bbox_head.transformer.query_decoder._layers.3.transformer_layers.4._layers.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.3.transformer_layers.5.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.3.transformer_layers.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.4.transformer_layers.0.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.4.transformer_layers.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.4.transformer_layers.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in StreamPETRHead  

pts_bbox_head.transformer.query_decoder._layers.4.transformer_layers.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.4.transformer_layers.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.4.transformer_layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.4.transformer_layers.2.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.4.transformer_layers.2.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.4.transformer_layers.2.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in StreamPETRHead  

pts_bbox_head.transformer.query_decoder._layers.4.transformer_layers.2.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.4.transformer_layers.3.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.4.transformer_layers.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.4.transformer_layers.4._layers.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in StreamPETRHead  

pts_bbox_head.transformer.query_decoder._layers.4.transformer_layers.4._layers.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.4.transformer_layers.4._layers.3.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in StreamPETRHead  

pts_bbox_head.transformer.query_decoder._layers.4.transformer_layers.4._layers.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.4.transformer_layers.5.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.4.transformer_layers.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.5.transformer_layers.0.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.5.transformer_layers.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.5.transformer_layers.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in StreamPETRHead  

pts_bbox_head.transformer.query_decoder._layers.5.transformer_layers.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.5.transformer_layers.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.5.transformer_layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.5.transformer_layers.2.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.5.transformer_layers.2.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.5.transformer_layers.2.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in StreamPETRHead  

pts_bbox_head.transformer.query_decoder._layers.5.transformer_layers.2.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.5.transformer_layers.3.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.5.transformer_layers.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.5.transformer_layers.4._layers.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in StreamPETRHead  

pts_bbox_head.transformer.query_decoder._layers.5.transformer_layers.4._layers.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.5.transformer_layers.4._layers.3.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in StreamPETRHead  

pts_bbox_head.transformer.query_decoder._layers.5.transformer_layers.4._layers.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.5.transformer_layers.5.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.transformer.query_decoder._layers.5.transformer_layers.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.query_pos.0.weight - torch.Size([256, 396]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.query_pos.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.query_pos.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.query_pos.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.time_embedding.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.time_embedding.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.time_embedding.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.time_embedding.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.ego_pose_pe.reduce.0.weight - torch.Size([256, 156]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.ego_pose_pe.reduce.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.ego_pose_pe.gamma.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.ego_pose_pe.gamma.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.ego_pose_pe.beta.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

pts_bbox_head.ego_pose_pe.beta.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stem.stem_1/conv.weight - torch.Size([64, 3, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stem.stem_1/norm.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stem.stem_1/norm.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stem.stem_2/conv.weight - torch.Size([64, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stem.stem_2/norm.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stem.stem_2/norm.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stem.stem_3/conv.weight - torch.Size([128, 64, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stem.stem_3/norm.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stem.stem_3/norm.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage2.OSA2_1.layers.0.OSA2_1_0/conv.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage2.OSA2_1.layers.0.OSA2_1_0/norm.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage2.OSA2_1.layers.0.OSA2_1_0/norm.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage2.OSA2_1.layers.1.OSA2_1_1/conv.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage2.OSA2_1.layers.1.OSA2_1_1/norm.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage2.OSA2_1.layers.1.OSA2_1_1/norm.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage2.OSA2_1.layers.2.OSA2_1_2/conv.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage2.OSA2_1.layers.2.OSA2_1_2/norm.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage2.OSA2_1.layers.2.OSA2_1_2/norm.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage2.OSA2_1.layers.3.OSA2_1_3/conv.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage2.OSA2_1.layers.3.OSA2_1_3/norm.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage2.OSA2_1.layers.3.OSA2_1_3/norm.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage2.OSA2_1.layers.4.OSA2_1_4/conv.weight - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage2.OSA2_1.layers.4.OSA2_1_4/norm.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage2.OSA2_1.layers.4.OSA2_1_4/norm.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage2.OSA2_1.concat.OSA2_1_concat/conv.weight - torch.Size([256, 768, 1, 1]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage2.OSA2_1.concat.OSA2_1_concat/norm.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage2.OSA2_1.concat.OSA2_1_concat/norm.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage2.OSA2_1.ese.fc.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage2.OSA2_1.ese.fc.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_1.layers.0.OSA3_1_0/conv.weight - torch.Size([160, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_1.layers.0.OSA3_1_0/norm.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_1.layers.0.OSA3_1_0/norm.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_1.layers.1.OSA3_1_1/conv.weight - torch.Size([160, 160, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_1.layers.1.OSA3_1_1/norm.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_1.layers.1.OSA3_1_1/norm.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_1.layers.2.OSA3_1_2/conv.weight - torch.Size([160, 160, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_1.layers.2.OSA3_1_2/norm.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_1.layers.2.OSA3_1_2/norm.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_1.layers.3.OSA3_1_3/conv.weight - torch.Size([160, 160, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_1.layers.3.OSA3_1_3/norm.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_1.layers.3.OSA3_1_3/norm.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_1.layers.4.OSA3_1_4/conv.weight - torch.Size([160, 160, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_1.layers.4.OSA3_1_4/norm.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_1.layers.4.OSA3_1_4/norm.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_1.concat.OSA3_1_concat/conv.weight - torch.Size([512, 1056, 1, 1]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_1.concat.OSA3_1_concat/norm.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_1.concat.OSA3_1_concat/norm.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_1.ese.fc.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_1.ese.fc.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_2.layers.0.OSA3_2_0/conv.weight - torch.Size([160, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_2.layers.0.OSA3_2_0/norm.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_2.layers.0.OSA3_2_0/norm.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_2.layers.1.OSA3_2_1/conv.weight - torch.Size([160, 160, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_2.layers.1.OSA3_2_1/norm.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_2.layers.1.OSA3_2_1/norm.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_2.layers.2.OSA3_2_2/conv.weight - torch.Size([160, 160, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_2.layers.2.OSA3_2_2/norm.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_2.layers.2.OSA3_2_2/norm.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_2.layers.3.OSA3_2_3/conv.weight - torch.Size([160, 160, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_2.layers.3.OSA3_2_3/norm.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_2.layers.3.OSA3_2_3/norm.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_2.layers.4.OSA3_2_4/conv.weight - torch.Size([160, 160, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_2.layers.4.OSA3_2_4/norm.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_2.layers.4.OSA3_2_4/norm.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_2.concat.OSA3_2_concat/conv.weight - torch.Size([512, 1312, 1, 1]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_2.concat.OSA3_2_concat/norm.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_2.concat.OSA3_2_concat/norm.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_2.ese.fc.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_2.ese.fc.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_3.layers.0.OSA3_3_0/conv.weight - torch.Size([160, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_3.layers.0.OSA3_3_0/norm.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_3.layers.0.OSA3_3_0/norm.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_3.layers.1.OSA3_3_1/conv.weight - torch.Size([160, 160, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_3.layers.1.OSA3_3_1/norm.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_3.layers.1.OSA3_3_1/norm.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_3.layers.2.OSA3_3_2/conv.weight - torch.Size([160, 160, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_3.layers.2.OSA3_3_2/norm.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_3.layers.2.OSA3_3_2/norm.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_3.layers.3.OSA3_3_3/conv.weight - torch.Size([160, 160, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_3.layers.3.OSA3_3_3/norm.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_3.layers.3.OSA3_3_3/norm.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_3.layers.4.OSA3_3_4/conv.weight - torch.Size([160, 160, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_3.layers.4.OSA3_3_4/norm.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_3.layers.4.OSA3_3_4/norm.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_3.concat.OSA3_3_concat/conv.weight - torch.Size([512, 1312, 1, 1]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_3.concat.OSA3_3_concat/norm.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_3.concat.OSA3_3_concat/norm.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_3.ese.fc.weight - torch.Size([512, 512, 1, 1]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage3.OSA3_3.ese.fc.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_1.layers.0.OSA4_1_0/conv.weight - torch.Size([192, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_1.layers.0.OSA4_1_0/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_1.layers.0.OSA4_1_0/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_1.layers.1.OSA4_1_1/conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_1.layers.1.OSA4_1_1/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_1.layers.1.OSA4_1_1/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_1.layers.2.OSA4_1_2/conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_1.layers.2.OSA4_1_2/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_1.layers.2.OSA4_1_2/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_1.layers.3.OSA4_1_3/conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_1.layers.3.OSA4_1_3/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_1.layers.3.OSA4_1_3/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_1.layers.4.OSA4_1_4/conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_1.layers.4.OSA4_1_4/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_1.layers.4.OSA4_1_4/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_1.concat.OSA4_1_concat/conv.weight - torch.Size([768, 1472, 1, 1]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_1.concat.OSA4_1_concat/norm.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_1.concat.OSA4_1_concat/norm.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_1.ese.fc.weight - torch.Size([768, 768, 1, 1]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_1.ese.fc.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_2.layers.0.OSA4_2_0/conv.weight - torch.Size([192, 768, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_2.layers.0.OSA4_2_0/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_2.layers.0.OSA4_2_0/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_2.layers.1.OSA4_2_1/conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_2.layers.1.OSA4_2_1/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_2.layers.1.OSA4_2_1/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_2.layers.2.OSA4_2_2/conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_2.layers.2.OSA4_2_2/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_2.layers.2.OSA4_2_2/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_2.layers.3.OSA4_2_3/conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_2.layers.3.OSA4_2_3/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_2.layers.3.OSA4_2_3/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_2.layers.4.OSA4_2_4/conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_2.layers.4.OSA4_2_4/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_2.layers.4.OSA4_2_4/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_2.concat.OSA4_2_concat/conv.weight - torch.Size([768, 1728, 1, 1]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_2.concat.OSA4_2_concat/norm.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_2.concat.OSA4_2_concat/norm.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_2.ese.fc.weight - torch.Size([768, 768, 1, 1]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_2.ese.fc.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_3.layers.0.OSA4_3_0/conv.weight - torch.Size([192, 768, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_3.layers.0.OSA4_3_0/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_3.layers.0.OSA4_3_0/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_3.layers.1.OSA4_3_1/conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_3.layers.1.OSA4_3_1/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_3.layers.1.OSA4_3_1/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_3.layers.2.OSA4_3_2/conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_3.layers.2.OSA4_3_2/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_3.layers.2.OSA4_3_2/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_3.layers.3.OSA4_3_3/conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_3.layers.3.OSA4_3_3/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_3.layers.3.OSA4_3_3/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_3.layers.4.OSA4_3_4/conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_3.layers.4.OSA4_3_4/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_3.layers.4.OSA4_3_4/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_3.concat.OSA4_3_concat/conv.weight - torch.Size([768, 1728, 1, 1]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_3.concat.OSA4_3_concat/norm.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_3.concat.OSA4_3_concat/norm.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_3.ese.fc.weight - torch.Size([768, 768, 1, 1]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_3.ese.fc.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_4.layers.0.OSA4_4_0/conv.weight - torch.Size([192, 768, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_4.layers.0.OSA4_4_0/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_4.layers.0.OSA4_4_0/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_4.layers.1.OSA4_4_1/conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_4.layers.1.OSA4_4_1/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_4.layers.1.OSA4_4_1/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_4.layers.2.OSA4_4_2/conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_4.layers.2.OSA4_4_2/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_4.layers.2.OSA4_4_2/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_4.layers.3.OSA4_4_3/conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_4.layers.3.OSA4_4_3/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_4.layers.3.OSA4_4_3/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_4.layers.4.OSA4_4_4/conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_4.layers.4.OSA4_4_4/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_4.layers.4.OSA4_4_4/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_4.concat.OSA4_4_concat/conv.weight - torch.Size([768, 1728, 1, 1]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_4.concat.OSA4_4_concat/norm.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_4.concat.OSA4_4_concat/norm.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_4.ese.fc.weight - torch.Size([768, 768, 1, 1]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_4.ese.fc.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_5.layers.0.OSA4_5_0/conv.weight - torch.Size([192, 768, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_5.layers.0.OSA4_5_0/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_5.layers.0.OSA4_5_0/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_5.layers.1.OSA4_5_1/conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_5.layers.1.OSA4_5_1/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_5.layers.1.OSA4_5_1/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_5.layers.2.OSA4_5_2/conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_5.layers.2.OSA4_5_2/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_5.layers.2.OSA4_5_2/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_5.layers.3.OSA4_5_3/conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_5.layers.3.OSA4_5_3/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_5.layers.3.OSA4_5_3/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_5.layers.4.OSA4_5_4/conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_5.layers.4.OSA4_5_4/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_5.layers.4.OSA4_5_4/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_5.concat.OSA4_5_concat/conv.weight - torch.Size([768, 1728, 1, 1]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_5.concat.OSA4_5_concat/norm.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_5.concat.OSA4_5_concat/norm.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_5.ese.fc.weight - torch.Size([768, 768, 1, 1]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_5.ese.fc.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_6.layers.0.OSA4_6_0/conv.weight - torch.Size([192, 768, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_6.layers.0.OSA4_6_0/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_6.layers.0.OSA4_6_0/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_6.layers.1.OSA4_6_1/conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_6.layers.1.OSA4_6_1/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_6.layers.1.OSA4_6_1/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_6.layers.2.OSA4_6_2/conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_6.layers.2.OSA4_6_2/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_6.layers.2.OSA4_6_2/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_6.layers.3.OSA4_6_3/conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_6.layers.3.OSA4_6_3/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_6.layers.3.OSA4_6_3/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_6.layers.4.OSA4_6_4/conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_6.layers.4.OSA4_6_4/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_6.layers.4.OSA4_6_4/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_6.concat.OSA4_6_concat/conv.weight - torch.Size([768, 1728, 1, 1]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_6.concat.OSA4_6_concat/norm.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_6.concat.OSA4_6_concat/norm.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_6.ese.fc.weight - torch.Size([768, 768, 1, 1]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_6.ese.fc.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_7.layers.0.OSA4_7_0/conv.weight - torch.Size([192, 768, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_7.layers.0.OSA4_7_0/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_7.layers.0.OSA4_7_0/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_7.layers.1.OSA4_7_1/conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_7.layers.1.OSA4_7_1/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_7.layers.1.OSA4_7_1/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_7.layers.2.OSA4_7_2/conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_7.layers.2.OSA4_7_2/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_7.layers.2.OSA4_7_2/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_7.layers.3.OSA4_7_3/conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_7.layers.3.OSA4_7_3/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_7.layers.3.OSA4_7_3/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_7.layers.4.OSA4_7_4/conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_7.layers.4.OSA4_7_4/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_7.layers.4.OSA4_7_4/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_7.concat.OSA4_7_concat/conv.weight - torch.Size([768, 1728, 1, 1]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_7.concat.OSA4_7_concat/norm.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_7.concat.OSA4_7_concat/norm.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_7.ese.fc.weight - torch.Size([768, 768, 1, 1]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_7.ese.fc.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_8.layers.0.OSA4_8_0/conv.weight - torch.Size([192, 768, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_8.layers.0.OSA4_8_0/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_8.layers.0.OSA4_8_0/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_8.layers.1.OSA4_8_1/conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_8.layers.1.OSA4_8_1/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_8.layers.1.OSA4_8_1/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_8.layers.2.OSA4_8_2/conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_8.layers.2.OSA4_8_2/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_8.layers.2.OSA4_8_2/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_8.layers.3.OSA4_8_3/conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_8.layers.3.OSA4_8_3/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_8.layers.3.OSA4_8_3/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_8.layers.4.OSA4_8_4/conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_8.layers.4.OSA4_8_4/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_8.layers.4.OSA4_8_4/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_8.concat.OSA4_8_concat/conv.weight - torch.Size([768, 1728, 1, 1]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_8.concat.OSA4_8_concat/norm.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_8.concat.OSA4_8_concat/norm.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_8.ese.fc.weight - torch.Size([768, 768, 1, 1]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_8.ese.fc.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_9.layers.0.OSA4_9_0/conv.weight - torch.Size([192, 768, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_9.layers.0.OSA4_9_0/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_9.layers.0.OSA4_9_0/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_9.layers.1.OSA4_9_1/conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_9.layers.1.OSA4_9_1/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_9.layers.1.OSA4_9_1/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_9.layers.2.OSA4_9_2/conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_9.layers.2.OSA4_9_2/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_9.layers.2.OSA4_9_2/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_9.layers.3.OSA4_9_3/conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_9.layers.3.OSA4_9_3/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_9.layers.3.OSA4_9_3/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_9.layers.4.OSA4_9_4/conv.weight - torch.Size([192, 192, 3, 3]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_9.layers.4.OSA4_9_4/norm.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_9.layers.4.OSA4_9_4/norm.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_9.concat.OSA4_9_concat/conv.weight - torch.Size([768, 1728, 1, 1]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_9.concat.OSA4_9_concat/norm.weight - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_9.concat.OSA4_9_concat/norm.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_9.ese.fc.weight - torch.Size([768, 768, 1, 1]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_backbone.stage4.OSA4_9.ese.fc.bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_neck.lateral_convs.0.conv.weight - torch.Size([256, 768, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

img_neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

img_neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

img_neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.code_weights - torch.Size([2]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.match_costs - torch.Size([2]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.pc_range - torch.Size([6]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.cls_branches.0.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.cls_branches.0.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.cls_branches.0.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.cls_branches.0.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.cls_branches.0.3.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.cls_branches.0.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.cls_branches.0.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.cls_branches.0.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.cls_branches.0.6.weight - torch.Size([1, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.cls_branches.0.6.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in PETRHeadM  

map_head.reg_branches.0.0.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHeadM  

map_head.reg_branches.0.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.reg_branches.0.2.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHeadM  

map_head.reg_branches.0.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.reg_branches.0.4.weight - torch.Size([33, 256]): 
Initialized by user-defined `init_weights` in PETRHeadM  

map_head.reg_branches.0.4.bias - torch.Size([33]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.input_projection.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.input_projection.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.output_projection.weight - torch.Size([4096, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.output_projection.bias - torch.Size([4096]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.reference_points_lane.weight - torch.Size([3, 256]): 
Initialized by user-defined `init_weights` in PETRHeadM  

map_head.reference_points_lane.bias - torch.Size([3]): 
Initialized by user-defined `init_weights` in PETRHeadM  

map_head.points_embedding_lane.weight - torch.Size([11, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.instance_embedding_lane.weight - torch.Size([1800, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.query_embedding.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.0.transformer_layers.0.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.0.transformer_layers.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.0.transformer_layers.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHeadM  

map_head.transformer.query_decoder._layers.0.transformer_layers.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.0.transformer_layers.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.0.transformer_layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.0.transformer_layers.2.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.0.transformer_layers.2.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.0.transformer_layers.2.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHeadM  

map_head.transformer.query_decoder._layers.0.transformer_layers.2.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.0.transformer_layers.3.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.0.transformer_layers.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.0.transformer_layers.4._layers.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in PETRHeadM  

map_head.transformer.query_decoder._layers.0.transformer_layers.4._layers.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.0.transformer_layers.4._layers.3.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in PETRHeadM  

map_head.transformer.query_decoder._layers.0.transformer_layers.4._layers.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.0.transformer_layers.5.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.0.transformer_layers.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.1.transformer_layers.0.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.1.transformer_layers.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.1.transformer_layers.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHeadM  

map_head.transformer.query_decoder._layers.1.transformer_layers.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.1.transformer_layers.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.1.transformer_layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.1.transformer_layers.2.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.1.transformer_layers.2.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.1.transformer_layers.2.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHeadM  

map_head.transformer.query_decoder._layers.1.transformer_layers.2.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.1.transformer_layers.3.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.1.transformer_layers.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.1.transformer_layers.4._layers.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in PETRHeadM  

map_head.transformer.query_decoder._layers.1.transformer_layers.4._layers.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.1.transformer_layers.4._layers.3.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in PETRHeadM  

map_head.transformer.query_decoder._layers.1.transformer_layers.4._layers.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.1.transformer_layers.5.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.1.transformer_layers.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.2.transformer_layers.0.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.2.transformer_layers.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.2.transformer_layers.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHeadM  

map_head.transformer.query_decoder._layers.2.transformer_layers.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.2.transformer_layers.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.2.transformer_layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.2.transformer_layers.2.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.2.transformer_layers.2.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.2.transformer_layers.2.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHeadM  

map_head.transformer.query_decoder._layers.2.transformer_layers.2.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.2.transformer_layers.3.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.2.transformer_layers.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.2.transformer_layers.4._layers.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in PETRHeadM  

map_head.transformer.query_decoder._layers.2.transformer_layers.4._layers.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.2.transformer_layers.4._layers.3.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in PETRHeadM  

map_head.transformer.query_decoder._layers.2.transformer_layers.4._layers.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.2.transformer_layers.5.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.2.transformer_layers.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.3.transformer_layers.0.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.3.transformer_layers.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.3.transformer_layers.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHeadM  

map_head.transformer.query_decoder._layers.3.transformer_layers.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.3.transformer_layers.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.3.transformer_layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.3.transformer_layers.2.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.3.transformer_layers.2.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.3.transformer_layers.2.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHeadM  

map_head.transformer.query_decoder._layers.3.transformer_layers.2.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.3.transformer_layers.3.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.3.transformer_layers.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.3.transformer_layers.4._layers.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in PETRHeadM  

map_head.transformer.query_decoder._layers.3.transformer_layers.4._layers.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.3.transformer_layers.4._layers.3.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in PETRHeadM  

map_head.transformer.query_decoder._layers.3.transformer_layers.4._layers.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.3.transformer_layers.5.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.3.transformer_layers.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.4.transformer_layers.0.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.4.transformer_layers.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.4.transformer_layers.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHeadM  

map_head.transformer.query_decoder._layers.4.transformer_layers.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.4.transformer_layers.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.4.transformer_layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.4.transformer_layers.2.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.4.transformer_layers.2.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.4.transformer_layers.2.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHeadM  

map_head.transformer.query_decoder._layers.4.transformer_layers.2.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.4.transformer_layers.3.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.4.transformer_layers.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.4.transformer_layers.4._layers.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in PETRHeadM  

map_head.transformer.query_decoder._layers.4.transformer_layers.4._layers.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.4.transformer_layers.4._layers.3.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in PETRHeadM  

map_head.transformer.query_decoder._layers.4.transformer_layers.4._layers.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.4.transformer_layers.5.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.4.transformer_layers.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.5.transformer_layers.0.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.5.transformer_layers.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.5.transformer_layers.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHeadM  

map_head.transformer.query_decoder._layers.5.transformer_layers.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.5.transformer_layers.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.5.transformer_layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.5.transformer_layers.2.attn.in_proj_weight - torch.Size([768, 256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.5.transformer_layers.2.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.5.transformer_layers.2.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in PETRHeadM  

map_head.transformer.query_decoder._layers.5.transformer_layers.2.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.5.transformer_layers.3.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.5.transformer_layers.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.5.transformer_layers.4._layers.0.weight - torch.Size([2048, 256]): 
Initialized by user-defined `init_weights` in PETRHeadM  

map_head.transformer.query_decoder._layers.5.transformer_layers.4._layers.0.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.5.transformer_layers.4._layers.3.weight - torch.Size([256, 2048]): 
Initialized by user-defined `init_weights` in PETRHeadM  

map_head.transformer.query_decoder._layers.5.transformer_layers.4._layers.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.5.transformer_layers.5.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

map_head.transformer.query_decoder._layers.5.transformer_layers.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  

position_encoder.0.weight - torch.Size([1024, 192]): 
The value is the same before and after calling `init_weights` of Petr3D  

position_encoder.0.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of Petr3D  

position_encoder.2.weight - torch.Size([256, 1024]): 
The value is the same before and after calling `init_weights` of Petr3D  

position_encoder.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Petr3D  
2025-03-02 00:02:49,860 - mmdet - INFO - Model:
Petr3D(
  (pts_bbox_head): StreamPETRHead(
    (loss_cls): FocalLoss()
    (loss_bbox): L1Loss()
    (cls_branches): ModuleList(
      (0): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (2): ReLU(inplace=True)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (5): ReLU(inplace=True)
        (6): Linear(in_features=256, out_features=10, bias=True)
      )
      (1): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (2): ReLU(inplace=True)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (5): ReLU(inplace=True)
        (6): Linear(in_features=256, out_features=10, bias=True)
      )
      (2): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (2): ReLU(inplace=True)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (5): ReLU(inplace=True)
        (6): Linear(in_features=256, out_features=10, bias=True)
      )
      (3): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (2): ReLU(inplace=True)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (5): ReLU(inplace=True)
        (6): Linear(in_features=256, out_features=10, bias=True)
      )
      (4): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (2): ReLU(inplace=True)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (5): ReLU(inplace=True)
        (6): Linear(in_features=256, out_features=10, bias=True)
      )
      (5): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (2): ReLU(inplace=True)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (5): ReLU(inplace=True)
        (6): Linear(in_features=256, out_features=10, bias=True)
      )
    )
    (reg_branches): ModuleList(
      (0): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (1): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (2): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (3): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (4): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
      (5): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=10, bias=True)
      )
    )
    (input_projection): Linear(in_features=256, out_features=256, bias=True)
    (output_projection): Linear(in_features=256, out_features=4096, bias=True)
    (reference_points): Embedding(600, 3)
    (pseudo_reference_points): Embedding(300, 3)
    (query_embedding): Embedding(256, 256)
    (can_bus_embed): Sequential(
      (0): Linear(in_features=74, out_features=1024, bias=True)
      (1): ReLU()
      (2): Linear(in_features=1024, out_features=4096, bias=True)
    )
    (loss_iou): GIoULoss()
    (transformer): PETRTemporalTransformer(
      (query_decoder): PETRTransformerDecoder(
        (_layers): ModuleList(
          (0): PETRTransformerDecoderLayer(
            (transformer_layers): ModuleList(
              (0): MultiHeadAttentionwDropout(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.1, inplace=False)
              )
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): MultiHeadAttentionwDropout(
                (attn): FlashMHA(
                  (inner_attn): FlashAttention()
                  (out_proj): Linear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.1, inplace=False)
              )
              (3): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (4): FFN(
                (_layers): Sequential(
                  (0): Linear(in_features=256, out_features=2048, bias=True)
                  (1): ReLU(inplace=True)
                  (2): Dropout(p=0.1, inplace=False)
                  (3): Linear(in_features=2048, out_features=256, bias=True)
                  (4): Dropout(p=0.1, inplace=False)
                )
              )
              (5): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (1): PETRTransformerDecoderLayer(
            (transformer_layers): ModuleList(
              (0): MultiHeadAttentionwDropout(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.1, inplace=False)
              )
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): MultiHeadAttentionwDropout(
                (attn): FlashMHA(
                  (inner_attn): FlashAttention()
                  (out_proj): Linear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.1, inplace=False)
              )
              (3): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (4): FFN(
                (_layers): Sequential(
                  (0): Linear(in_features=256, out_features=2048, bias=True)
                  (1): ReLU(inplace=True)
                  (2): Dropout(p=0.1, inplace=False)
                  (3): Linear(in_features=2048, out_features=256, bias=True)
                  (4): Dropout(p=0.1, inplace=False)
                )
              )
              (5): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (2): PETRTransformerDecoderLayer(
            (transformer_layers): ModuleList(
              (0): MultiHeadAttentionwDropout(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.1, inplace=False)
              )
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): MultiHeadAttentionwDropout(
                (attn): FlashMHA(
                  (inner_attn): FlashAttention()
                  (out_proj): Linear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.1, inplace=False)
              )
              (3): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (4): FFN(
                (_layers): Sequential(
                  (0): Linear(in_features=256, out_features=2048, bias=True)
                  (1): ReLU(inplace=True)
                  (2): Dropout(p=0.1, inplace=False)
                  (3): Linear(in_features=2048, out_features=256, bias=True)
                  (4): Dropout(p=0.1, inplace=False)
                )
              )
              (5): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (3): PETRTransformerDecoderLayer(
            (transformer_layers): ModuleList(
              (0): MultiHeadAttentionwDropout(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.1, inplace=False)
              )
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): MultiHeadAttentionwDropout(
                (attn): FlashMHA(
                  (inner_attn): FlashAttention()
                  (out_proj): Linear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.1, inplace=False)
              )
              (3): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (4): FFN(
                (_layers): Sequential(
                  (0): Linear(in_features=256, out_features=2048, bias=True)
                  (1): ReLU(inplace=True)
                  (2): Dropout(p=0.1, inplace=False)
                  (3): Linear(in_features=2048, out_features=256, bias=True)
                  (4): Dropout(p=0.1, inplace=False)
                )
              )
              (5): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (4): PETRTransformerDecoderLayer(
            (transformer_layers): ModuleList(
              (0): MultiHeadAttentionwDropout(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.1, inplace=False)
              )
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): MultiHeadAttentionwDropout(
                (attn): FlashMHA(
                  (inner_attn): FlashAttention()
                  (out_proj): Linear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.1, inplace=False)
              )
              (3): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (4): FFN(
                (_layers): Sequential(
                  (0): Linear(in_features=256, out_features=2048, bias=True)
                  (1): ReLU(inplace=True)
                  (2): Dropout(p=0.1, inplace=False)
                  (3): Linear(in_features=2048, out_features=256, bias=True)
                  (4): Dropout(p=0.1, inplace=False)
                )
              )
              (5): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (5): PETRTransformerDecoderLayer(
            (transformer_layers): ModuleList(
              (0): MultiHeadAttentionwDropout(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.1, inplace=False)
              )
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): MultiHeadAttentionwDropout(
                (attn): FlashMHA(
                  (inner_attn): FlashAttention()
                  (out_proj): Linear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.1, inplace=False)
              )
              (3): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (4): FFN(
                (_layers): Sequential(
                  (0): Linear(in_features=256, out_features=2048, bias=True)
                  (1): ReLU(inplace=True)
                  (2): Dropout(p=0.1, inplace=False)
                  (3): Linear(in_features=2048, out_features=256, bias=True)
                  (4): Dropout(p=0.1, inplace=False)
                )
              )
              (5): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
    )
    (query_pos): Sequential(
      (0): Linear(in_features=396, out_features=256, bias=True)
      (1): ReLU()
      (2): Linear(in_features=256, out_features=256, bias=True)
    )
    (time_embedding): Sequential(
      (0): Linear(in_features=256, out_features=256, bias=True)
      (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
    )
    (ego_pose_pe): MLN(
      (reduce): Sequential(
        (0): Linear(in_features=156, out_features=256, bias=True)
        (1): ReLU()
      )
      (gamma): Linear(in_features=256, out_features=256, bias=True)
      (beta): Linear(in_features=256, out_features=256, bias=True)
      (ln): LayerNorm((256,), eps=1e-05, elementwise_affine=False)
    )
  )
  (img_backbone): VoVNet(
    (stem): Sequential(
      (stem_1/conv): Conv2d(3, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (stem_1/norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (stem_1/relu): ReLU(inplace=True)
      (stem_2/conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (stem_2/norm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (stem_2/relu): ReLU(inplace=True)
      (stem_3/conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (stem_3/norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (stem_3/relu): ReLU(inplace=True)
    )
    (stage2): _OSA_stage(
      (OSA2_1): _OSA_module(
        (layers): ModuleList(
          (0): Sequential(
            (OSA2_1_0/conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA2_1_0/norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA2_1_0/relu): ReLU(inplace=True)
          )
          (1): Sequential(
            (OSA2_1_1/conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA2_1_1/norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA2_1_1/relu): ReLU(inplace=True)
          )
          (2): Sequential(
            (OSA2_1_2/conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA2_1_2/norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA2_1_2/relu): ReLU(inplace=True)
          )
          (3): Sequential(
            (OSA2_1_3/conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA2_1_3/norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA2_1_3/relu): ReLU(inplace=True)
          )
          (4): Sequential(
            (OSA2_1_4/conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA2_1_4/norm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA2_1_4/relu): ReLU(inplace=True)
          )
        )
        (concat): Sequential(
          (OSA2_1_concat/conv): Conv2d(768, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (OSA2_1_concat/norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (OSA2_1_concat/relu): ReLU(inplace=True)
        )
        (ese): eSEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
          (hsigmoid): Hsigmoid()
        )
      )
    )
    (stage3): _OSA_stage(
      (Pooling): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
      (OSA3_1): _OSA_module(
        (layers): ModuleList(
          (0): Sequential(
            (OSA3_1_0/conv): Conv2d(256, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA3_1_0/norm): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA3_1_0/relu): ReLU(inplace=True)
          )
          (1): Sequential(
            (OSA3_1_1/conv): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA3_1_1/norm): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA3_1_1/relu): ReLU(inplace=True)
          )
          (2): Sequential(
            (OSA3_1_2/conv): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA3_1_2/norm): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA3_1_2/relu): ReLU(inplace=True)
          )
          (3): Sequential(
            (OSA3_1_3/conv): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA3_1_3/norm): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA3_1_3/relu): ReLU(inplace=True)
          )
          (4): Sequential(
            (OSA3_1_4/conv): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA3_1_4/norm): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA3_1_4/relu): ReLU(inplace=True)
          )
        )
        (concat): Sequential(
          (OSA3_1_concat/conv): Conv2d(1056, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (OSA3_1_concat/norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (OSA3_1_concat/relu): ReLU(inplace=True)
        )
        (ese): eSEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
          (hsigmoid): Hsigmoid()
        )
      )
      (OSA3_2): _OSA_module(
        (layers): ModuleList(
          (0): Sequential(
            (OSA3_2_0/conv): Conv2d(512, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA3_2_0/norm): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA3_2_0/relu): ReLU(inplace=True)
          )
          (1): Sequential(
            (OSA3_2_1/conv): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA3_2_1/norm): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA3_2_1/relu): ReLU(inplace=True)
          )
          (2): Sequential(
            (OSA3_2_2/conv): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA3_2_2/norm): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA3_2_2/relu): ReLU(inplace=True)
          )
          (3): Sequential(
            (OSA3_2_3/conv): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA3_2_3/norm): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA3_2_3/relu): ReLU(inplace=True)
          )
          (4): Sequential(
            (OSA3_2_4/conv): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA3_2_4/norm): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA3_2_4/relu): ReLU(inplace=True)
          )
        )
        (concat): Sequential(
          (OSA3_2_concat/conv): Conv2d(1312, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (OSA3_2_concat/norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (OSA3_2_concat/relu): ReLU(inplace=True)
        )
        (ese): eSEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
          (hsigmoid): Hsigmoid()
        )
      )
      (OSA3_3): _OSA_module(
        (layers): ModuleList(
          (0): Sequential(
            (OSA3_3_0/conv): Conv2d(512, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA3_3_0/norm): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA3_3_0/relu): ReLU(inplace=True)
          )
          (1): Sequential(
            (OSA3_3_1/conv): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA3_3_1/norm): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA3_3_1/relu): ReLU(inplace=True)
          )
          (2): Sequential(
            (OSA3_3_2/conv): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA3_3_2/norm): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA3_3_2/relu): ReLU(inplace=True)
          )
          (3): Sequential(
            (OSA3_3_3/conv): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA3_3_3/norm): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA3_3_3/relu): ReLU(inplace=True)
          )
          (4): Sequential(
            (OSA3_3_4/conv): Conv2d(160, 160, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA3_3_4/norm): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA3_3_4/relu): ReLU(inplace=True)
          )
        )
        (concat): Sequential(
          (OSA3_3_concat/conv): Conv2d(1312, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (OSA3_3_concat/norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (OSA3_3_concat/relu): ReLU(inplace=True)
        )
        (ese): eSEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
          (hsigmoid): Hsigmoid()
        )
      )
    )
    (stage4): _OSA_stage(
      (Pooling): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=True)
      (OSA4_1): _OSA_module(
        (layers): ModuleList(
          (0): Sequential(
            (OSA4_1_0/conv): Conv2d(512, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_1_0/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_1_0/relu): ReLU(inplace=True)
          )
          (1): Sequential(
            (OSA4_1_1/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_1_1/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_1_1/relu): ReLU(inplace=True)
          )
          (2): Sequential(
            (OSA4_1_2/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_1_2/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_1_2/relu): ReLU(inplace=True)
          )
          (3): Sequential(
            (OSA4_1_3/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_1_3/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_1_3/relu): ReLU(inplace=True)
          )
          (4): Sequential(
            (OSA4_1_4/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_1_4/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_1_4/relu): ReLU(inplace=True)
          )
        )
        (concat): Sequential(
          (OSA4_1_concat/conv): Conv2d(1472, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (OSA4_1_concat/norm): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (OSA4_1_concat/relu): ReLU(inplace=True)
        )
        (ese): eSEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1))
          (hsigmoid): Hsigmoid()
        )
      )
      (OSA4_2): _OSA_module(
        (layers): ModuleList(
          (0): Sequential(
            (OSA4_2_0/conv): Conv2d(768, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_2_0/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_2_0/relu): ReLU(inplace=True)
          )
          (1): Sequential(
            (OSA4_2_1/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_2_1/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_2_1/relu): ReLU(inplace=True)
          )
          (2): Sequential(
            (OSA4_2_2/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_2_2/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_2_2/relu): ReLU(inplace=True)
          )
          (3): Sequential(
            (OSA4_2_3/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_2_3/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_2_3/relu): ReLU(inplace=True)
          )
          (4): Sequential(
            (OSA4_2_4/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_2_4/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_2_4/relu): ReLU(inplace=True)
          )
        )
        (concat): Sequential(
          (OSA4_2_concat/conv): Conv2d(1728, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (OSA4_2_concat/norm): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (OSA4_2_concat/relu): ReLU(inplace=True)
        )
        (ese): eSEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1))
          (hsigmoid): Hsigmoid()
        )
      )
      (OSA4_3): _OSA_module(
        (layers): ModuleList(
          (0): Sequential(
            (OSA4_3_0/conv): Conv2d(768, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_3_0/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_3_0/relu): ReLU(inplace=True)
          )
          (1): Sequential(
            (OSA4_3_1/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_3_1/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_3_1/relu): ReLU(inplace=True)
          )
          (2): Sequential(
            (OSA4_3_2/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_3_2/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_3_2/relu): ReLU(inplace=True)
          )
          (3): Sequential(
            (OSA4_3_3/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_3_3/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_3_3/relu): ReLU(inplace=True)
          )
          (4): Sequential(
            (OSA4_3_4/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_3_4/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_3_4/relu): ReLU(inplace=True)
          )
        )
        (concat): Sequential(
          (OSA4_3_concat/conv): Conv2d(1728, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (OSA4_3_concat/norm): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (OSA4_3_concat/relu): ReLU(inplace=True)
        )
        (ese): eSEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1))
          (hsigmoid): Hsigmoid()
        )
      )
      (OSA4_4): _OSA_module(
        (layers): ModuleList(
          (0): Sequential(
            (OSA4_4_0/conv): Conv2d(768, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_4_0/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_4_0/relu): ReLU(inplace=True)
          )
          (1): Sequential(
            (OSA4_4_1/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_4_1/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_4_1/relu): ReLU(inplace=True)
          )
          (2): Sequential(
            (OSA4_4_2/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_4_2/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_4_2/relu): ReLU(inplace=True)
          )
          (3): Sequential(
            (OSA4_4_3/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_4_3/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_4_3/relu): ReLU(inplace=True)
          )
          (4): Sequential(
            (OSA4_4_4/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_4_4/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_4_4/relu): ReLU(inplace=True)
          )
        )
        (concat): Sequential(
          (OSA4_4_concat/conv): Conv2d(1728, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (OSA4_4_concat/norm): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (OSA4_4_concat/relu): ReLU(inplace=True)
        )
        (ese): eSEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1))
          (hsigmoid): Hsigmoid()
        )
      )
      (OSA4_5): _OSA_module(
        (layers): ModuleList(
          (0): Sequential(
            (OSA4_5_0/conv): Conv2d(768, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_5_0/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_5_0/relu): ReLU(inplace=True)
          )
          (1): Sequential(
            (OSA4_5_1/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_5_1/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_5_1/relu): ReLU(inplace=True)
          )
          (2): Sequential(
            (OSA4_5_2/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_5_2/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_5_2/relu): ReLU(inplace=True)
          )
          (3): Sequential(
            (OSA4_5_3/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_5_3/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_5_3/relu): ReLU(inplace=True)
          )
          (4): Sequential(
            (OSA4_5_4/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_5_4/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_5_4/relu): ReLU(inplace=True)
          )
        )
        (concat): Sequential(
          (OSA4_5_concat/conv): Conv2d(1728, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (OSA4_5_concat/norm): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (OSA4_5_concat/relu): ReLU(inplace=True)
        )
        (ese): eSEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1))
          (hsigmoid): Hsigmoid()
        )
      )
      (OSA4_6): _OSA_module(
        (layers): ModuleList(
          (0): Sequential(
            (OSA4_6_0/conv): Conv2d(768, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_6_0/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_6_0/relu): ReLU(inplace=True)
          )
          (1): Sequential(
            (OSA4_6_1/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_6_1/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_6_1/relu): ReLU(inplace=True)
          )
          (2): Sequential(
            (OSA4_6_2/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_6_2/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_6_2/relu): ReLU(inplace=True)
          )
          (3): Sequential(
            (OSA4_6_3/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_6_3/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_6_3/relu): ReLU(inplace=True)
          )
          (4): Sequential(
            (OSA4_6_4/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_6_4/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_6_4/relu): ReLU(inplace=True)
          )
        )
        (concat): Sequential(
          (OSA4_6_concat/conv): Conv2d(1728, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (OSA4_6_concat/norm): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (OSA4_6_concat/relu): ReLU(inplace=True)
        )
        (ese): eSEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1))
          (hsigmoid): Hsigmoid()
        )
      )
      (OSA4_7): _OSA_module(
        (layers): ModuleList(
          (0): Sequential(
            (OSA4_7_0/conv): Conv2d(768, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_7_0/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_7_0/relu): ReLU(inplace=True)
          )
          (1): Sequential(
            (OSA4_7_1/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_7_1/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_7_1/relu): ReLU(inplace=True)
          )
          (2): Sequential(
            (OSA4_7_2/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_7_2/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_7_2/relu): ReLU(inplace=True)
          )
          (3): Sequential(
            (OSA4_7_3/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_7_3/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_7_3/relu): ReLU(inplace=True)
          )
          (4): Sequential(
            (OSA4_7_4/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_7_4/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_7_4/relu): ReLU(inplace=True)
          )
        )
        (concat): Sequential(
          (OSA4_7_concat/conv): Conv2d(1728, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (OSA4_7_concat/norm): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (OSA4_7_concat/relu): ReLU(inplace=True)
        )
        (ese): eSEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1))
          (hsigmoid): Hsigmoid()
        )
      )
      (OSA4_8): _OSA_module(
        (layers): ModuleList(
          (0): Sequential(
            (OSA4_8_0/conv): Conv2d(768, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_8_0/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_8_0/relu): ReLU(inplace=True)
          )
          (1): Sequential(
            (OSA4_8_1/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_8_1/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_8_1/relu): ReLU(inplace=True)
          )
          (2): Sequential(
            (OSA4_8_2/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_8_2/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_8_2/relu): ReLU(inplace=True)
          )
          (3): Sequential(
            (OSA4_8_3/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_8_3/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_8_3/relu): ReLU(inplace=True)
          )
          (4): Sequential(
            (OSA4_8_4/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_8_4/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_8_4/relu): ReLU(inplace=True)
          )
        )
        (concat): Sequential(
          (OSA4_8_concat/conv): Conv2d(1728, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (OSA4_8_concat/norm): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (OSA4_8_concat/relu): ReLU(inplace=True)
        )
        (ese): eSEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1))
          (hsigmoid): Hsigmoid()
        )
      )
      (OSA4_9): _OSA_module(
        (layers): ModuleList(
          (0): Sequential(
            (OSA4_9_0/conv): Conv2d(768, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_9_0/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_9_0/relu): ReLU(inplace=True)
          )
          (1): Sequential(
            (OSA4_9_1/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_9_1/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_9_1/relu): ReLU(inplace=True)
          )
          (2): Sequential(
            (OSA4_9_2/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_9_2/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_9_2/relu): ReLU(inplace=True)
          )
          (3): Sequential(
            (OSA4_9_3/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_9_3/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_9_3/relu): ReLU(inplace=True)
          )
          (4): Sequential(
            (OSA4_9_4/conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
            (OSA4_9_4/norm): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (OSA4_9_4/relu): ReLU(inplace=True)
          )
        )
        (concat): Sequential(
          (OSA4_9_concat/conv): Conv2d(1728, 768, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (OSA4_9_concat/norm): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (OSA4_9_concat/relu): ReLU(inplace=True)
        )
        (ese): eSEModule(
          (avg_pool): AdaptiveAvgPool2d(output_size=1)
          (fc): Conv2d(768, 768, kernel_size=(1, 1), stride=(1, 1))
          (hsigmoid): Hsigmoid()
        )
      )
    )
  )
  (img_neck): CPFPN(
    (lateral_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(768, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (fpn_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
    )
  )
  init_cfg={'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
  (grid_mask): GridMask()
  (query_pos): Sequential(
    (0): Linear(in_features=396, out_features=256, bias=True)
    (1): ReLU()
    (2): Linear(in_features=256, out_features=256, bias=True)
  )
  (time_embedding): Sequential(
    (0): Linear(in_features=256, out_features=256, bias=True)
    (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
  )
  (ego_pose_pe): MLN(
    (reduce): Sequential(
      (0): Linear(in_features=156, out_features=256, bias=True)
      (1): ReLU()
    )
    (gamma): Linear(in_features=256, out_features=256, bias=True)
    (beta): Linear(in_features=256, out_features=256, bias=True)
    (ln): LayerNorm((256,), eps=1e-05, elementwise_affine=False)
  )
  (map_head): PETRHeadM(
    (loss_cls): FocalLoss()
    (loss_bbox): L1Loss()
    (cls_branches): ModuleList(
      (0): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (2): ReLU(inplace=True)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (5): ReLU(inplace=True)
        (6): Linear(in_features=256, out_features=1, bias=True)
      )
      (1): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (2): ReLU(inplace=True)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (5): ReLU(inplace=True)
        (6): Linear(in_features=256, out_features=1, bias=True)
      )
      (2): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (2): ReLU(inplace=True)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (5): ReLU(inplace=True)
        (6): Linear(in_features=256, out_features=1, bias=True)
      )
      (3): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (2): ReLU(inplace=True)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (5): ReLU(inplace=True)
        (6): Linear(in_features=256, out_features=1, bias=True)
      )
      (4): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (2): ReLU(inplace=True)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (5): ReLU(inplace=True)
        (6): Linear(in_features=256, out_features=1, bias=True)
      )
      (5): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (2): ReLU(inplace=True)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (5): ReLU(inplace=True)
        (6): Linear(in_features=256, out_features=1, bias=True)
      )
    )
    (reg_branches): ModuleList(
      (0): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=33, bias=True)
      )
      (1): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=33, bias=True)
      )
      (2): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=33, bias=True)
      )
      (3): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=33, bias=True)
      )
      (4): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=33, bias=True)
      )
      (5): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU()
        (2): Linear(in_features=256, out_features=256, bias=True)
        (3): ReLU()
        (4): Linear(in_features=256, out_features=33, bias=True)
      )
    )
    (input_projection): Linear(in_features=256, out_features=256, bias=True)
    (output_projection): Linear(in_features=256, out_features=4096, bias=True)
    (reference_points_lane): Linear(in_features=256, out_features=3, bias=True)
    (points_embedding_lane): Embedding(11, 256)
    (instance_embedding_lane): Embedding(1800, 256)
    (query_embedding): Embedding(256, 256)
    (loss_dir): PtsDirCosLoss()
    (transformer): PETRTemporalTransformer(
      (query_decoder): PETRTransformerDecoder(
        (_layers): ModuleList(
          (0): PETRTransformerDecoderLayer(
            (transformer_layers): ModuleList(
              (0): MultiHeadAttentionwDropout(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.1, inplace=False)
              )
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): MultiHeadAttentionwDropout(
                (attn): FlashMHA(
                  (inner_attn): FlashAttention()
                  (out_proj): Linear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.1, inplace=False)
              )
              (3): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (4): FFN(
                (_layers): Sequential(
                  (0): Linear(in_features=256, out_features=2048, bias=True)
                  (1): ReLU(inplace=True)
                  (2): Dropout(p=0.1, inplace=False)
                  (3): Linear(in_features=2048, out_features=256, bias=True)
                  (4): Dropout(p=0.1, inplace=False)
                )
              )
              (5): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (1): PETRTransformerDecoderLayer(
            (transformer_layers): ModuleList(
              (0): MultiHeadAttentionwDropout(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.1, inplace=False)
              )
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): MultiHeadAttentionwDropout(
                (attn): FlashMHA(
                  (inner_attn): FlashAttention()
                  (out_proj): Linear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.1, inplace=False)
              )
              (3): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (4): FFN(
                (_layers): Sequential(
                  (0): Linear(in_features=256, out_features=2048, bias=True)
                  (1): ReLU(inplace=True)
                  (2): Dropout(p=0.1, inplace=False)
                  (3): Linear(in_features=2048, out_features=256, bias=True)
                  (4): Dropout(p=0.1, inplace=False)
                )
              )
              (5): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (2): PETRTransformerDecoderLayer(
            (transformer_layers): ModuleList(
              (0): MultiHeadAttentionwDropout(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.1, inplace=False)
              )
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): MultiHeadAttentionwDropout(
                (attn): FlashMHA(
                  (inner_attn): FlashAttention()
                  (out_proj): Linear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.1, inplace=False)
              )
              (3): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (4): FFN(
                (_layers): Sequential(
                  (0): Linear(in_features=256, out_features=2048, bias=True)
                  (1): ReLU(inplace=True)
                  (2): Dropout(p=0.1, inplace=False)
                  (3): Linear(in_features=2048, out_features=256, bias=True)
                  (4): Dropout(p=0.1, inplace=False)
                )
              )
              (5): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (3): PETRTransformerDecoderLayer(
            (transformer_layers): ModuleList(
              (0): MultiHeadAttentionwDropout(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.1, inplace=False)
              )
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): MultiHeadAttentionwDropout(
                (attn): FlashMHA(
                  (inner_attn): FlashAttention()
                  (out_proj): Linear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.1, inplace=False)
              )
              (3): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (4): FFN(
                (_layers): Sequential(
                  (0): Linear(in_features=256, out_features=2048, bias=True)
                  (1): ReLU(inplace=True)
                  (2): Dropout(p=0.1, inplace=False)
                  (3): Linear(in_features=2048, out_features=256, bias=True)
                  (4): Dropout(p=0.1, inplace=False)
                )
              )
              (5): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (4): PETRTransformerDecoderLayer(
            (transformer_layers): ModuleList(
              (0): MultiHeadAttentionwDropout(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.1, inplace=False)
              )
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): MultiHeadAttentionwDropout(
                (attn): FlashMHA(
                  (inner_attn): FlashAttention()
                  (out_proj): Linear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.1, inplace=False)
              )
              (3): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (4): FFN(
                (_layers): Sequential(
                  (0): Linear(in_features=256, out_features=2048, bias=True)
                  (1): ReLU(inplace=True)
                  (2): Dropout(p=0.1, inplace=False)
                  (3): Linear(in_features=2048, out_features=256, bias=True)
                  (4): Dropout(p=0.1, inplace=False)
                )
              )
              (5): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
          (5): PETRTransformerDecoderLayer(
            (transformer_layers): ModuleList(
              (0): MultiHeadAttentionwDropout(
                (attn): MultiheadAttention(
                  (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.1, inplace=False)
              )
              (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (2): MultiHeadAttentionwDropout(
                (attn): FlashMHA(
                  (inner_attn): FlashAttention()
                  (out_proj): Linear(in_features=256, out_features=256, bias=True)
                )
                (proj_drop): Dropout(p=0.1, inplace=False)
              )
              (3): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
              (4): FFN(
                (_layers): Sequential(
                  (0): Linear(in_features=256, out_features=2048, bias=True)
                  (1): ReLU(inplace=True)
                  (2): Dropout(p=0.1, inplace=False)
                  (3): Linear(in_features=2048, out_features=256, bias=True)
                  (4): Dropout(p=0.1, inplace=False)
                )
              )
              (5): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
            )
          )
        )
      )
    )
    (query_pos): Sequential(
      (0): Linear(in_features=396, out_features=256, bias=True)
      (1): ReLU()
      (2): Linear(in_features=256, out_features=256, bias=True)
    )
    (time_embedding): Sequential(
      (0): Linear(in_features=256, out_features=256, bias=True)
      (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
    )
    (ego_pose_pe): MLN(
      (reduce): Sequential(
        (0): Linear(in_features=156, out_features=256, bias=True)
        (1): ReLU()
      )
      (gamma): Linear(in_features=256, out_features=256, bias=True)
      (beta): Linear(in_features=256, out_features=256, bias=True)
      (ln): LayerNorm((256,), eps=1e-05, elementwise_affine=False)
    )
  )
  (position_encoder): Sequential(
    (0): Linear(in_features=192, out_features=1024, bias=True)
    (1): ReLU()
    (2): Linear(in_features=1024, out_features=256, bias=True)
  )
)
2025-03-02 00:03:15,013 - mmdet - INFO - load checkpoint from local path: ckpts/fcos3d_vovnet_imgbackbone-remapped.pth
2025-03-02 00:03:15,250 - mmdet - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: bbox_head.cls_convs.0.conv.weight, bbox_head.cls_convs.0.conv.bias, bbox_head.cls_convs.0.gn.weight, bbox_head.cls_convs.0.gn.bias, bbox_head.cls_convs.1.conv.weight, bbox_head.cls_convs.1.conv.bias, bbox_head.cls_convs.1.gn.weight, bbox_head.cls_convs.1.gn.bias, bbox_head.reg_convs.0.conv.weight, bbox_head.reg_convs.0.conv.bias, bbox_head.reg_convs.0.gn.weight, bbox_head.reg_convs.0.gn.bias, bbox_head.reg_convs.1.conv.weight, bbox_head.reg_convs.1.conv.bias, bbox_head.reg_convs.1.gn.weight, bbox_head.reg_convs.1.gn.bias, bbox_head.conv_cls_prev.0.conv.weight, bbox_head.conv_cls_prev.0.conv.bias, bbox_head.conv_cls_prev.0.gn.weight, bbox_head.conv_cls_prev.0.gn.bias, bbox_head.conv_cls.weight, bbox_head.conv_cls.bias, bbox_head.conv_reg_prevs.0.0.conv.weight, bbox_head.conv_reg_prevs.0.0.conv.bias, bbox_head.conv_reg_prevs.0.0.gn.weight, bbox_head.conv_reg_prevs.0.0.gn.bias, bbox_head.conv_reg_prevs.1.0.conv.weight, bbox_head.conv_reg_prevs.1.0.conv.bias, bbox_head.conv_reg_prevs.1.0.gn.weight, bbox_head.conv_reg_prevs.1.0.gn.bias, bbox_head.conv_reg_prevs.2.0.conv.weight, bbox_head.conv_reg_prevs.2.0.conv.bias, bbox_head.conv_reg_prevs.2.0.gn.weight, bbox_head.conv_reg_prevs.2.0.gn.bias, bbox_head.conv_reg_prevs.3.0.conv.weight, bbox_head.conv_reg_prevs.3.0.conv.bias, bbox_head.conv_reg_prevs.3.0.gn.weight, bbox_head.conv_reg_prevs.3.0.gn.bias, bbox_head.conv_regs.0.weight, bbox_head.conv_regs.0.bias, bbox_head.conv_regs.1.weight, bbox_head.conv_regs.1.bias, bbox_head.conv_regs.2.weight, bbox_head.conv_regs.2.bias, bbox_head.conv_regs.3.weight, bbox_head.conv_regs.3.bias, bbox_head.conv_regs.4.weight, bbox_head.conv_regs.4.bias, bbox_head.conv_dir_cls_prev.0.conv.weight, bbox_head.conv_dir_cls_prev.0.conv.bias, bbox_head.conv_dir_cls_prev.0.gn.weight, bbox_head.conv_dir_cls_prev.0.gn.bias, bbox_head.conv_dir_cls.weight, bbox_head.conv_dir_cls.bias, bbox_head.conv_attr_prev.0.conv.weight, bbox_head.conv_attr_prev.0.conv.bias, bbox_head.conv_attr_prev.0.gn.weight, bbox_head.conv_attr_prev.0.gn.bias, bbox_head.conv_attr.weight, bbox_head.conv_attr.bias, bbox_head.conv_centerness_prev.0.conv.weight, bbox_head.conv_centerness_prev.0.conv.bias, bbox_head.conv_centerness_prev.0.gn.weight, bbox_head.conv_centerness_prev.0.gn.bias, bbox_head.conv_centerness.weight, bbox_head.conv_centerness.bias, bbox_head.scales.0.0.scale, bbox_head.scales.0.1.scale, bbox_head.scales.0.2.scale, bbox_head.scales.1.0.scale, bbox_head.scales.1.1.scale, bbox_head.scales.1.2.scale, bbox_head.scales.2.0.scale, bbox_head.scales.2.1.scale, bbox_head.scales.2.2.scale, bbox_head.scales.3.0.scale, bbox_head.scales.3.1.scale, bbox_head.scales.3.2.scale, bbox_head.scales.4.0.scale, bbox_head.scales.4.1.scale, bbox_head.scales.4.2.scale, img_backbone.stage5.OSA5_1.layers.0.OSA5_1_0/conv.weight, img_backbone.stage5.OSA5_1.layers.0.OSA5_1_0/norm.weight, img_backbone.stage5.OSA5_1.layers.0.OSA5_1_0/norm.bias, img_backbone.stage5.OSA5_1.layers.0.OSA5_1_0/norm.running_mean, img_backbone.stage5.OSA5_1.layers.0.OSA5_1_0/norm.running_var, img_backbone.stage5.OSA5_1.layers.0.OSA5_1_0/norm.num_batches_tracked, img_backbone.stage5.OSA5_1.layers.1.OSA5_1_1/conv.weight, img_backbone.stage5.OSA5_1.layers.1.OSA5_1_1/norm.weight, img_backbone.stage5.OSA5_1.layers.1.OSA5_1_1/norm.bias, img_backbone.stage5.OSA5_1.layers.1.OSA5_1_1/norm.running_mean, img_backbone.stage5.OSA5_1.layers.1.OSA5_1_1/norm.running_var, img_backbone.stage5.OSA5_1.layers.1.OSA5_1_1/norm.num_batches_tracked, img_backbone.stage5.OSA5_1.layers.2.OSA5_1_2/conv.weight, img_backbone.stage5.OSA5_1.layers.2.OSA5_1_2/norm.weight, img_backbone.stage5.OSA5_1.layers.2.OSA5_1_2/norm.bias, img_backbone.stage5.OSA5_1.layers.2.OSA5_1_2/norm.running_mean, img_backbone.stage5.OSA5_1.layers.2.OSA5_1_2/norm.running_var, img_backbone.stage5.OSA5_1.layers.2.OSA5_1_2/norm.num_batches_tracked, img_backbone.stage5.OSA5_1.layers.3.OSA5_1_3/conv.weight, img_backbone.stage5.OSA5_1.layers.3.OSA5_1_3/norm.weight, img_backbone.stage5.OSA5_1.layers.3.OSA5_1_3/norm.bias, img_backbone.stage5.OSA5_1.layers.3.OSA5_1_3/norm.running_mean, img_backbone.stage5.OSA5_1.layers.3.OSA5_1_3/norm.running_var, img_backbone.stage5.OSA5_1.layers.3.OSA5_1_3/norm.num_batches_tracked, img_backbone.stage5.OSA5_1.layers.4.OSA5_1_4/conv.weight, img_backbone.stage5.OSA5_1.layers.4.OSA5_1_4/norm.weight, img_backbone.stage5.OSA5_1.layers.4.OSA5_1_4/norm.bias, img_backbone.stage5.OSA5_1.layers.4.OSA5_1_4/norm.running_mean, img_backbone.stage5.OSA5_1.layers.4.OSA5_1_4/norm.running_var, img_backbone.stage5.OSA5_1.layers.4.OSA5_1_4/norm.num_batches_tracked, img_backbone.stage5.OSA5_1.concat.OSA5_1_concat/conv.weight, img_backbone.stage5.OSA5_1.concat.OSA5_1_concat/norm.weight, img_backbone.stage5.OSA5_1.concat.OSA5_1_concat/norm.bias, img_backbone.stage5.OSA5_1.concat.OSA5_1_concat/norm.running_mean, img_backbone.stage5.OSA5_1.concat.OSA5_1_concat/norm.running_var, img_backbone.stage5.OSA5_1.concat.OSA5_1_concat/norm.num_batches_tracked, img_backbone.stage5.OSA5_1.ese.fc.weight, img_backbone.stage5.OSA5_1.ese.fc.bias, img_backbone.stage5.OSA5_2.layers.0.OSA5_2_0/conv.weight, img_backbone.stage5.OSA5_2.layers.0.OSA5_2_0/norm.weight, img_backbone.stage5.OSA5_2.layers.0.OSA5_2_0/norm.bias, img_backbone.stage5.OSA5_2.layers.0.OSA5_2_0/norm.running_mean, img_backbone.stage5.OSA5_2.layers.0.OSA5_2_0/norm.running_var, img_backbone.stage5.OSA5_2.layers.0.OSA5_2_0/norm.num_batches_tracked, img_backbone.stage5.OSA5_2.layers.1.OSA5_2_1/conv.weight, img_backbone.stage5.OSA5_2.layers.1.OSA5_2_1/norm.weight, img_backbone.stage5.OSA5_2.layers.1.OSA5_2_1/norm.bias, img_backbone.stage5.OSA5_2.layers.1.OSA5_2_1/norm.running_mean, img_backbone.stage5.OSA5_2.layers.1.OSA5_2_1/norm.running_var, img_backbone.stage5.OSA5_2.layers.1.OSA5_2_1/norm.num_batches_tracked, img_backbone.stage5.OSA5_2.layers.2.OSA5_2_2/conv.weight, img_backbone.stage5.OSA5_2.layers.2.OSA5_2_2/norm.weight, img_backbone.stage5.OSA5_2.layers.2.OSA5_2_2/norm.bias, img_backbone.stage5.OSA5_2.layers.2.OSA5_2_2/norm.running_mean, img_backbone.stage5.OSA5_2.layers.2.OSA5_2_2/norm.running_var, img_backbone.stage5.OSA5_2.layers.2.OSA5_2_2/norm.num_batches_tracked, img_backbone.stage5.OSA5_2.layers.3.OSA5_2_3/conv.weight, img_backbone.stage5.OSA5_2.layers.3.OSA5_2_3/norm.weight, img_backbone.stage5.OSA5_2.layers.3.OSA5_2_3/norm.bias, img_backbone.stage5.OSA5_2.layers.3.OSA5_2_3/norm.running_mean, img_backbone.stage5.OSA5_2.layers.3.OSA5_2_3/norm.running_var, img_backbone.stage5.OSA5_2.layers.3.OSA5_2_3/norm.num_batches_tracked, img_backbone.stage5.OSA5_2.layers.4.OSA5_2_4/conv.weight, img_backbone.stage5.OSA5_2.layers.4.OSA5_2_4/norm.weight, img_backbone.stage5.OSA5_2.layers.4.OSA5_2_4/norm.bias, img_backbone.stage5.OSA5_2.layers.4.OSA5_2_4/norm.running_mean, img_backbone.stage5.OSA5_2.layers.4.OSA5_2_4/norm.running_var, img_backbone.stage5.OSA5_2.layers.4.OSA5_2_4/norm.num_batches_tracked, img_backbone.stage5.OSA5_2.concat.OSA5_2_concat/conv.weight, img_backbone.stage5.OSA5_2.concat.OSA5_2_concat/norm.weight, img_backbone.stage5.OSA5_2.concat.OSA5_2_concat/norm.bias, img_backbone.stage5.OSA5_2.concat.OSA5_2_concat/norm.running_mean, img_backbone.stage5.OSA5_2.concat.OSA5_2_concat/norm.running_var, img_backbone.stage5.OSA5_2.concat.OSA5_2_concat/norm.num_batches_tracked, img_backbone.stage5.OSA5_2.ese.fc.weight, img_backbone.stage5.OSA5_2.ese.fc.bias, img_backbone.stage5.OSA5_3.layers.0.OSA5_3_0/conv.weight, img_backbone.stage5.OSA5_3.layers.0.OSA5_3_0/norm.weight, img_backbone.stage5.OSA5_3.layers.0.OSA5_3_0/norm.bias, img_backbone.stage5.OSA5_3.layers.0.OSA5_3_0/norm.running_mean, img_backbone.stage5.OSA5_3.layers.0.OSA5_3_0/norm.running_var, img_backbone.stage5.OSA5_3.layers.0.OSA5_3_0/norm.num_batches_tracked, img_backbone.stage5.OSA5_3.layers.1.OSA5_3_1/conv.weight, img_backbone.stage5.OSA5_3.layers.1.OSA5_3_1/norm.weight, img_backbone.stage5.OSA5_3.layers.1.OSA5_3_1/norm.bias, img_backbone.stage5.OSA5_3.layers.1.OSA5_3_1/norm.running_mean, img_backbone.stage5.OSA5_3.layers.1.OSA5_3_1/norm.running_var, img_backbone.stage5.OSA5_3.layers.1.OSA5_3_1/norm.num_batches_tracked, img_backbone.stage5.OSA5_3.layers.2.OSA5_3_2/conv.weight, img_backbone.stage5.OSA5_3.layers.2.OSA5_3_2/norm.weight, img_backbone.stage5.OSA5_3.layers.2.OSA5_3_2/norm.bias, img_backbone.stage5.OSA5_3.layers.2.OSA5_3_2/norm.running_mean, img_backbone.stage5.OSA5_3.layers.2.OSA5_3_2/norm.running_var, img_backbone.stage5.OSA5_3.layers.2.OSA5_3_2/norm.num_batches_tracked, img_backbone.stage5.OSA5_3.layers.3.OSA5_3_3/conv.weight, img_backbone.stage5.OSA5_3.layers.3.OSA5_3_3/norm.weight, img_backbone.stage5.OSA5_3.layers.3.OSA5_3_3/norm.bias, img_backbone.stage5.OSA5_3.layers.3.OSA5_3_3/norm.running_mean, img_backbone.stage5.OSA5_3.layers.3.OSA5_3_3/norm.running_var, img_backbone.stage5.OSA5_3.layers.3.OSA5_3_3/norm.num_batches_tracked, img_backbone.stage5.OSA5_3.layers.4.OSA5_3_4/conv.weight, img_backbone.stage5.OSA5_3.layers.4.OSA5_3_4/norm.weight, img_backbone.stage5.OSA5_3.layers.4.OSA5_3_4/norm.bias, img_backbone.stage5.OSA5_3.layers.4.OSA5_3_4/norm.running_mean, img_backbone.stage5.OSA5_3.layers.4.OSA5_3_4/norm.running_var, img_backbone.stage5.OSA5_3.layers.4.OSA5_3_4/norm.num_batches_tracked, img_backbone.stage5.OSA5_3.concat.OSA5_3_concat/conv.weight, img_backbone.stage5.OSA5_3.concat.OSA5_3_concat/norm.weight, img_backbone.stage5.OSA5_3.concat.OSA5_3_concat/norm.bias, img_backbone.stage5.OSA5_3.concat.OSA5_3_concat/norm.running_mean, img_backbone.stage5.OSA5_3.concat.OSA5_3_concat/norm.running_var, img_backbone.stage5.OSA5_3.concat.OSA5_3_concat/norm.num_batches_tracked, img_backbone.stage5.OSA5_3.ese.fc.weight, img_backbone.stage5.OSA5_3.ese.fc.bias

missing keys in source state_dict: position_range, coords_d, pts_bbox_head.code_weights, pts_bbox_head.match_costs, pts_bbox_head.pc_range, pts_bbox_head.cls_branches.0.0.weight, pts_bbox_head.cls_branches.0.0.bias, pts_bbox_head.cls_branches.0.1.weight, pts_bbox_head.cls_branches.0.1.bias, pts_bbox_head.cls_branches.0.3.weight, pts_bbox_head.cls_branches.0.3.bias, pts_bbox_head.cls_branches.0.4.weight, pts_bbox_head.cls_branches.0.4.bias, pts_bbox_head.cls_branches.0.6.weight, pts_bbox_head.cls_branches.0.6.bias, pts_bbox_head.cls_branches.1.0.weight, pts_bbox_head.cls_branches.1.0.bias, pts_bbox_head.cls_branches.1.1.weight, pts_bbox_head.cls_branches.1.1.bias, pts_bbox_head.cls_branches.1.3.weight, pts_bbox_head.cls_branches.1.3.bias, pts_bbox_head.cls_branches.1.4.weight, pts_bbox_head.cls_branches.1.4.bias, pts_bbox_head.cls_branches.1.6.weight, pts_bbox_head.cls_branches.1.6.bias, pts_bbox_head.cls_branches.2.0.weight, pts_bbox_head.cls_branches.2.0.bias, pts_bbox_head.cls_branches.2.1.weight, pts_bbox_head.cls_branches.2.1.bias, pts_bbox_head.cls_branches.2.3.weight, pts_bbox_head.cls_branches.2.3.bias, pts_bbox_head.cls_branches.2.4.weight, pts_bbox_head.cls_branches.2.4.bias, pts_bbox_head.cls_branches.2.6.weight, pts_bbox_head.cls_branches.2.6.bias, pts_bbox_head.cls_branches.3.0.weight, pts_bbox_head.cls_branches.3.0.bias, pts_bbox_head.cls_branches.3.1.weight, pts_bbox_head.cls_branches.3.1.bias, pts_bbox_head.cls_branches.3.3.weight, pts_bbox_head.cls_branches.3.3.bias, pts_bbox_head.cls_branches.3.4.weight, pts_bbox_head.cls_branches.3.4.bias, pts_bbox_head.cls_branches.3.6.weight, pts_bbox_head.cls_branches.3.6.bias, pts_bbox_head.cls_branches.4.0.weight, pts_bbox_head.cls_branches.4.0.bias, pts_bbox_head.cls_branches.4.1.weight, pts_bbox_head.cls_branches.4.1.bias, pts_bbox_head.cls_branches.4.3.weight, pts_bbox_head.cls_branches.4.3.bias, pts_bbox_head.cls_branches.4.4.weight, pts_bbox_head.cls_branches.4.4.bias, pts_bbox_head.cls_branches.4.6.weight, pts_bbox_head.cls_branches.4.6.bias, pts_bbox_head.cls_branches.5.0.weight, pts_bbox_head.cls_branches.5.0.bias, pts_bbox_head.cls_branches.5.1.weight, pts_bbox_head.cls_branches.5.1.bias, pts_bbox_head.cls_branches.5.3.weight, pts_bbox_head.cls_branches.5.3.bias, pts_bbox_head.cls_branches.5.4.weight, pts_bbox_head.cls_branches.5.4.bias, pts_bbox_head.cls_branches.5.6.weight, pts_bbox_head.cls_branches.5.6.bias, pts_bbox_head.reg_branches.0.0.weight, pts_bbox_head.reg_branches.0.0.bias, pts_bbox_head.reg_branches.0.2.weight, pts_bbox_head.reg_branches.0.2.bias, pts_bbox_head.reg_branches.0.4.weight, pts_bbox_head.reg_branches.0.4.bias, pts_bbox_head.reg_branches.1.0.weight, pts_bbox_head.reg_branches.1.0.bias, pts_bbox_head.reg_branches.1.2.weight, pts_bbox_head.reg_branches.1.2.bias, pts_bbox_head.reg_branches.1.4.weight, pts_bbox_head.reg_branches.1.4.bias, pts_bbox_head.reg_branches.2.0.weight, pts_bbox_head.reg_branches.2.0.bias, pts_bbox_head.reg_branches.2.2.weight, pts_bbox_head.reg_branches.2.2.bias, pts_bbox_head.reg_branches.2.4.weight, pts_bbox_head.reg_branches.2.4.bias, pts_bbox_head.reg_branches.3.0.weight, pts_bbox_head.reg_branches.3.0.bias, pts_bbox_head.reg_branches.3.2.weight, pts_bbox_head.reg_branches.3.2.bias, pts_bbox_head.reg_branches.3.4.weight, pts_bbox_head.reg_branches.3.4.bias, pts_bbox_head.reg_branches.4.0.weight, pts_bbox_head.reg_branches.4.0.bias, pts_bbox_head.reg_branches.4.2.weight, pts_bbox_head.reg_branches.4.2.bias, pts_bbox_head.reg_branches.4.4.weight, pts_bbox_head.reg_branches.4.4.bias, pts_bbox_head.reg_branches.5.0.weight, pts_bbox_head.reg_branches.5.0.bias, pts_bbox_head.reg_branches.5.2.weight, pts_bbox_head.reg_branches.5.2.bias, pts_bbox_head.reg_branches.5.4.weight, pts_bbox_head.reg_branches.5.4.bias, pts_bbox_head.input_projection.weight, pts_bbox_head.input_projection.bias, pts_bbox_head.output_projection.weight, pts_bbox_head.output_projection.bias, pts_bbox_head.reference_points.weight, pts_bbox_head.pseudo_reference_points.weight, pts_bbox_head.query_embedding.weight, pts_bbox_head.can_bus_embed.0.weight, pts_bbox_head.can_bus_embed.0.bias, pts_bbox_head.can_bus_embed.2.weight, pts_bbox_head.can_bus_embed.2.bias, pts_bbox_head.transformer.query_decoder._layers.0.transformer_layers.0.attn.in_proj_weight, pts_bbox_head.transformer.query_decoder._layers.0.transformer_layers.0.attn.in_proj_bias, pts_bbox_head.transformer.query_decoder._layers.0.transformer_layers.0.attn.out_proj.weight, pts_bbox_head.transformer.query_decoder._layers.0.transformer_layers.0.attn.out_proj.bias, pts_bbox_head.transformer.query_decoder._layers.0.transformer_layers.1.weight, pts_bbox_head.transformer.query_decoder._layers.0.transformer_layers.1.bias, pts_bbox_head.transformer.query_decoder._layers.0.transformer_layers.2.attn.in_proj_weight, pts_bbox_head.transformer.query_decoder._layers.0.transformer_layers.2.attn.in_proj_bias, pts_bbox_head.transformer.query_decoder._layers.0.transformer_layers.2.attn.out_proj.weight, pts_bbox_head.transformer.query_decoder._layers.0.transformer_layers.2.attn.out_proj.bias, pts_bbox_head.transformer.query_decoder._layers.0.transformer_layers.3.weight, pts_bbox_head.transformer.query_decoder._layers.0.transformer_layers.3.bias, pts_bbox_head.transformer.query_decoder._layers.0.transformer_layers.4._layers.0.weight, pts_bbox_head.transformer.query_decoder._layers.0.transformer_layers.4._layers.0.bias, pts_bbox_head.transformer.query_decoder._layers.0.transformer_layers.4._layers.3.weight, pts_bbox_head.transformer.query_decoder._layers.0.transformer_layers.4._layers.3.bias, pts_bbox_head.transformer.query_decoder._layers.0.transformer_layers.5.weight, pts_bbox_head.transformer.query_decoder._layers.0.transformer_layers.5.bias, pts_bbox_head.transformer.query_decoder._layers.1.transformer_layers.0.attn.in_proj_weight, pts_bbox_head.transformer.query_decoder._layers.1.transformer_layers.0.attn.in_proj_bias, pts_bbox_head.transformer.query_decoder._layers.1.transformer_layers.0.attn.out_proj.weight, pts_bbox_head.transformer.query_decoder._layers.1.transformer_layers.0.attn.out_proj.bias, pts_bbox_head.transformer.query_decoder._layers.1.transformer_layers.1.weight, pts_bbox_head.transformer.query_decoder._layers.1.transformer_layers.1.bias, pts_bbox_head.transformer.query_decoder._layers.1.transformer_layers.2.attn.in_proj_weight, pts_bbox_head.transformer.query_decoder._layers.1.transformer_layers.2.attn.in_proj_bias, pts_bbox_head.transformer.query_decoder._layers.1.transformer_layers.2.attn.out_proj.weight, pts_bbox_head.transformer.query_decoder._layers.1.transformer_layers.2.attn.out_proj.bias, pts_bbox_head.transformer.query_decoder._layers.1.transformer_layers.3.weight, pts_bbox_head.transformer.query_decoder._layers.1.transformer_layers.3.bias, pts_bbox_head.transformer.query_decoder._layers.1.transformer_layers.4._layers.0.weight, pts_bbox_head.transformer.query_decoder._layers.1.transformer_layers.4._layers.0.bias, pts_bbox_head.transformer.query_decoder._layers.1.transformer_layers.4._layers.3.weight, pts_bbox_head.transformer.query_decoder._layers.1.transformer_layers.4._layers.3.bias, pts_bbox_head.transformer.query_decoder._layers.1.transformer_layers.5.weight, pts_bbox_head.transformer.query_decoder._layers.1.transformer_layers.5.bias, pts_bbox_head.transformer.query_decoder._layers.2.transformer_layers.0.attn.in_proj_weight, pts_bbox_head.transformer.query_decoder._layers.2.transformer_layers.0.attn.in_proj_bias, pts_bbox_head.transformer.query_decoder._layers.2.transformer_layers.0.attn.out_proj.weight, pts_bbox_head.transformer.query_decoder._layers.2.transformer_layers.0.attn.out_proj.bias, pts_bbox_head.transformer.query_decoder._layers.2.transformer_layers.1.weight, pts_bbox_head.transformer.query_decoder._layers.2.transformer_layers.1.bias, pts_bbox_head.transformer.query_decoder._layers.2.transformer_layers.2.attn.in_proj_weight, pts_bbox_head.transformer.query_decoder._layers.2.transformer_layers.2.attn.in_proj_bias, pts_bbox_head.transformer.query_decoder._layers.2.transformer_layers.2.attn.out_proj.weight, pts_bbox_head.transformer.query_decoder._layers.2.transformer_layers.2.attn.out_proj.bias, pts_bbox_head.transformer.query_decoder._layers.2.transformer_layers.3.weight, pts_bbox_head.transformer.query_decoder._layers.2.transformer_layers.3.bias, pts_bbox_head.transformer.query_decoder._layers.2.transformer_layers.4._layers.0.weight, pts_bbox_head.transformer.query_decoder._layers.2.transformer_layers.4._layers.0.bias, pts_bbox_head.transformer.query_decoder._layers.2.transformer_layers.4._layers.3.weight, pts_bbox_head.transformer.query_decoder._layers.2.transformer_layers.4._layers.3.bias, pts_bbox_head.transformer.query_decoder._layers.2.transformer_layers.5.weight, pts_bbox_head.transformer.query_decoder._layers.2.transformer_layers.5.bias, pts_bbox_head.transformer.query_decoder._layers.3.transformer_layers.0.attn.in_proj_weight, pts_bbox_head.transformer.query_decoder._layers.3.transformer_layers.0.attn.in_proj_bias, pts_bbox_head.transformer.query_decoder._layers.3.transformer_layers.0.attn.out_proj.weight, pts_bbox_head.transformer.query_decoder._layers.3.transformer_layers.0.attn.out_proj.bias, pts_bbox_head.transformer.query_decoder._layers.3.transformer_layers.1.weight, pts_bbox_head.transformer.query_decoder._layers.3.transformer_layers.1.bias, pts_bbox_head.transformer.query_decoder._layers.3.transformer_layers.2.attn.in_proj_weight, pts_bbox_head.transformer.query_decoder._layers.3.transformer_layers.2.attn.in_proj_bias, pts_bbox_head.transformer.query_decoder._layers.3.transformer_layers.2.attn.out_proj.weight, pts_bbox_head.transformer.query_decoder._layers.3.transformer_layers.2.attn.out_proj.bias, pts_bbox_head.transformer.query_decoder._layers.3.transformer_layers.3.weight, pts_bbox_head.transformer.query_decoder._layers.3.transformer_layers.3.bias, pts_bbox_head.transformer.query_decoder._layers.3.transformer_layers.4._layers.0.weight, pts_bbox_head.transformer.query_decoder._layers.3.transformer_layers.4._layers.0.bias, pts_bbox_head.transformer.query_decoder._layers.3.transformer_layers.4._layers.3.weight, pts_bbox_head.transformer.query_decoder._layers.3.transformer_layers.4._layers.3.bias, pts_bbox_head.transformer.query_decoder._layers.3.transformer_layers.5.weight, pts_bbox_head.transformer.query_decoder._layers.3.transformer_layers.5.bias, pts_bbox_head.transformer.query_decoder._layers.4.transformer_layers.0.attn.in_proj_weight, pts_bbox_head.transformer.query_decoder._layers.4.transformer_layers.0.attn.in_proj_bias, pts_bbox_head.transformer.query_decoder._layers.4.transformer_layers.0.attn.out_proj.weight, pts_bbox_head.transformer.query_decoder._layers.4.transformer_layers.0.attn.out_proj.bias, pts_bbox_head.transformer.query_decoder._layers.4.transformer_layers.1.weight, pts_bbox_head.transformer.query_decoder._layers.4.transformer_layers.1.bias, pts_bbox_head.transformer.query_decoder._layers.4.transformer_layers.2.attn.in_proj_weight, pts_bbox_head.transformer.query_decoder._layers.4.transformer_layers.2.attn.in_proj_bias, pts_bbox_head.transformer.query_decoder._layers.4.transformer_layers.2.attn.out_proj.weight, pts_bbox_head.transformer.query_decoder._layers.4.transformer_layers.2.attn.out_proj.bias, pts_bbox_head.transformer.query_decoder._layers.4.transformer_layers.3.weight, pts_bbox_head.transformer.query_decoder._layers.4.transformer_layers.3.bias, pts_bbox_head.transformer.query_decoder._layers.4.transformer_layers.4._layers.0.weight, pts_bbox_head.transformer.query_decoder._layers.4.transformer_layers.4._layers.0.bias, pts_bbox_head.transformer.query_decoder._layers.4.transformer_layers.4._layers.3.weight, pts_bbox_head.transformer.query_decoder._layers.4.transformer_layers.4._layers.3.bias, pts_bbox_head.transformer.query_decoder._layers.4.transformer_layers.5.weight, pts_bbox_head.transformer.query_decoder._layers.4.transformer_layers.5.bias, pts_bbox_head.transformer.query_decoder._layers.5.transformer_layers.0.attn.in_proj_weight, pts_bbox_head.transformer.query_decoder._layers.5.transformer_layers.0.attn.in_proj_bias, pts_bbox_head.transformer.query_decoder._layers.5.transformer_layers.0.attn.out_proj.weight, pts_bbox_head.transformer.query_decoder._layers.5.transformer_layers.0.attn.out_proj.bias, pts_bbox_head.transformer.query_decoder._layers.5.transformer_layers.1.weight, pts_bbox_head.transformer.query_decoder._layers.5.transformer_layers.1.bias, pts_bbox_head.transformer.query_decoder._layers.5.transformer_layers.2.attn.in_proj_weight, pts_bbox_head.transformer.query_decoder._layers.5.transformer_layers.2.attn.in_proj_bias, pts_bbox_head.transformer.query_decoder._layers.5.transformer_layers.2.attn.out_proj.weight, pts_bbox_head.transformer.query_decoder._layers.5.transformer_layers.2.attn.out_proj.bias, pts_bbox_head.transformer.query_decoder._layers.5.transformer_layers.3.weight, pts_bbox_head.transformer.query_decoder._layers.5.transformer_layers.3.bias, pts_bbox_head.transformer.query_decoder._layers.5.transformer_layers.4._layers.0.weight, pts_bbox_head.transformer.query_decoder._layers.5.transformer_layers.4._layers.0.bias, pts_bbox_head.transformer.query_decoder._layers.5.transformer_layers.4._layers.3.weight, pts_bbox_head.transformer.query_decoder._layers.5.transformer_layers.4._layers.3.bias, pts_bbox_head.transformer.query_decoder._layers.5.transformer_layers.5.weight, pts_bbox_head.transformer.query_decoder._layers.5.transformer_layers.5.bias, pts_bbox_head.query_pos.0.weight, pts_bbox_head.query_pos.0.bias, pts_bbox_head.query_pos.2.weight, pts_bbox_head.query_pos.2.bias, pts_bbox_head.time_embedding.0.weight, pts_bbox_head.time_embedding.0.bias, pts_bbox_head.time_embedding.1.weight, pts_bbox_head.time_embedding.1.bias, pts_bbox_head.ego_pose_pe.reduce.0.weight, pts_bbox_head.ego_pose_pe.reduce.0.bias, pts_bbox_head.ego_pose_pe.gamma.weight, pts_bbox_head.ego_pose_pe.gamma.bias, pts_bbox_head.ego_pose_pe.beta.weight, pts_bbox_head.ego_pose_pe.beta.bias, img_neck.lateral_convs.0.conv.weight, img_neck.lateral_convs.0.conv.bias, img_neck.fpn_convs.0.conv.weight, img_neck.fpn_convs.0.conv.bias, query_pos.0.weight, query_pos.0.bias, query_pos.2.weight, query_pos.2.bias, time_embedding.0.weight, time_embedding.0.bias, time_embedding.1.weight, time_embedding.1.bias, ego_pose_pe.reduce.0.weight, ego_pose_pe.reduce.0.bias, ego_pose_pe.gamma.weight, ego_pose_pe.gamma.bias, ego_pose_pe.beta.weight, ego_pose_pe.beta.bias, map_head.code_weights, map_head.match_costs, map_head.pc_range, map_head.cls_branches.0.0.weight, map_head.cls_branches.0.0.bias, map_head.cls_branches.0.1.weight, map_head.cls_branches.0.1.bias, map_head.cls_branches.0.3.weight, map_head.cls_branches.0.3.bias, map_head.cls_branches.0.4.weight, map_head.cls_branches.0.4.bias, map_head.cls_branches.0.6.weight, map_head.cls_branches.0.6.bias, map_head.cls_branches.1.0.weight, map_head.cls_branches.1.0.bias, map_head.cls_branches.1.1.weight, map_head.cls_branches.1.1.bias, map_head.cls_branches.1.3.weight, map_head.cls_branches.1.3.bias, map_head.cls_branches.1.4.weight, map_head.cls_branches.1.4.bias, map_head.cls_branches.1.6.weight, map_head.cls_branches.1.6.bias, map_head.cls_branches.2.0.weight, map_head.cls_branches.2.0.bias, map_head.cls_branches.2.1.weight, map_head.cls_branches.2.1.bias, map_head.cls_branches.2.3.weight, map_head.cls_branches.2.3.bias, map_head.cls_branches.2.4.weight, map_head.cls_branches.2.4.bias, map_head.cls_branches.2.6.weight, map_head.cls_branches.2.6.bias, map_head.cls_branches.3.0.weight, map_head.cls_branches.3.0.bias, map_head.cls_branches.3.1.weight, map_head.cls_branches.3.1.bias, map_head.cls_branches.3.3.weight, map_head.cls_branches.3.3.bias, map_head.cls_branches.3.4.weight, map_head.cls_branches.3.4.bias, map_head.cls_branches.3.6.weight, map_head.cls_branches.3.6.bias, map_head.cls_branches.4.0.weight, map_head.cls_branches.4.0.bias, map_head.cls_branches.4.1.weight, map_head.cls_branches.4.1.bias, map_head.cls_branches.4.3.weight, map_head.cls_branches.4.3.bias, map_head.cls_branches.4.4.weight, map_head.cls_branches.4.4.bias, map_head.cls_branches.4.6.weight, map_head.cls_branches.4.6.bias, map_head.cls_branches.5.0.weight, map_head.cls_branches.5.0.bias, map_head.cls_branches.5.1.weight, map_head.cls_branches.5.1.bias, map_head.cls_branches.5.3.weight, map_head.cls_branches.5.3.bias, map_head.cls_branches.5.4.weight, map_head.cls_branches.5.4.bias, map_head.cls_branches.5.6.weight, map_head.cls_branches.5.6.bias, map_head.reg_branches.0.0.weight, map_head.reg_branches.0.0.bias, map_head.reg_branches.0.2.weight, map_head.reg_branches.0.2.bias, map_head.reg_branches.0.4.weight, map_head.reg_branches.0.4.bias, map_head.reg_branches.1.0.weight, map_head.reg_branches.1.0.bias, map_head.reg_branches.1.2.weight, map_head.reg_branches.1.2.bias, map_head.reg_branches.1.4.weight, map_head.reg_branches.1.4.bias, map_head.reg_branches.2.0.weight, map_head.reg_branches.2.0.bias, map_head.reg_branches.2.2.weight, map_head.reg_branches.2.2.bias, map_head.reg_branches.2.4.weight, map_head.reg_branches.2.4.bias, map_head.reg_branches.3.0.weight, map_head.reg_branches.3.0.bias, map_head.reg_branches.3.2.weight, map_head.reg_branches.3.2.bias, map_head.reg_branches.3.4.weight, map_head.reg_branches.3.4.bias, map_head.reg_branches.4.0.weight, map_head.reg_branches.4.0.bias, map_head.reg_branches.4.2.weight, map_head.reg_branches.4.2.bias, map_head.reg_branches.4.4.weight, map_head.reg_branches.4.4.bias, map_head.reg_branches.5.0.weight, map_head.reg_branches.5.0.bias, map_head.reg_branches.5.2.weight, map_head.reg_branches.5.2.bias, map_head.reg_branches.5.4.weight, map_head.reg_branches.5.4.bias, map_head.input_projection.weight, map_head.input_projection.bias, map_head.output_projection.weight, map_head.output_projection.bias, map_head.reference_points_lane.weight, map_head.reference_points_lane.bias, map_head.points_embedding_lane.weight, map_head.instance_embedding_lane.weight, map_head.query_embedding.weight, map_head.transformer.query_decoder._layers.0.transformer_layers.0.attn.in_proj_weight, map_head.transformer.query_decoder._layers.0.transformer_layers.0.attn.in_proj_bias, map_head.transformer.query_decoder._layers.0.transformer_layers.0.attn.out_proj.weight, map_head.transformer.query_decoder._layers.0.transformer_layers.0.attn.out_proj.bias, map_head.transformer.query_decoder._layers.0.transformer_layers.1.weight, map_head.transformer.query_decoder._layers.0.transformer_layers.1.bias, map_head.transformer.query_decoder._layers.0.transformer_layers.2.attn.in_proj_weight, map_head.transformer.query_decoder._layers.0.transformer_layers.2.attn.in_proj_bias, map_head.transformer.query_decoder._layers.0.transformer_layers.2.attn.out_proj.weight, map_head.transformer.query_decoder._layers.0.transformer_layers.2.attn.out_proj.bias, map_head.transformer.query_decoder._layers.0.transformer_layers.3.weight, map_head.transformer.query_decoder._layers.0.transformer_layers.3.bias, map_head.transformer.query_decoder._layers.0.transformer_layers.4._layers.0.weight, map_head.transformer.query_decoder._layers.0.transformer_layers.4._layers.0.bias, map_head.transformer.query_decoder._layers.0.transformer_layers.4._layers.3.weight, map_head.transformer.query_decoder._layers.0.transformer_layers.4._layers.3.bias, map_head.transformer.query_decoder._layers.0.transformer_layers.5.weight, map_head.transformer.query_decoder._layers.0.transformer_layers.5.bias, map_head.transformer.query_decoder._layers.1.transformer_layers.0.attn.in_proj_weight, map_head.transformer.query_decoder._layers.1.transformer_layers.0.attn.in_proj_bias, map_head.transformer.query_decoder._layers.1.transformer_layers.0.attn.out_proj.weight, map_head.transformer.query_decoder._layers.1.transformer_layers.0.attn.out_proj.bias, map_head.transformer.query_decoder._layers.1.transformer_layers.1.weight, map_head.transformer.query_decoder._layers.1.transformer_layers.1.bias, map_head.transformer.query_decoder._layers.1.transformer_layers.2.attn.in_proj_weight, map_head.transformer.query_decoder._layers.1.transformer_layers.2.attn.in_proj_bias, map_head.transformer.query_decoder._layers.1.transformer_layers.2.attn.out_proj.weight, map_head.transformer.query_decoder._layers.1.transformer_layers.2.attn.out_proj.bias, map_head.transformer.query_decoder._layers.1.transformer_layers.3.weight, map_head.transformer.query_decoder._layers.1.transformer_layers.3.bias, map_head.transformer.query_decoder._layers.1.transformer_layers.4._layers.0.weight, map_head.transformer.query_decoder._layers.1.transformer_layers.4._layers.0.bias, map_head.transformer.query_decoder._layers.1.transformer_layers.4._layers.3.weight, map_head.transformer.query_decoder._layers.1.transformer_layers.4._layers.3.bias, map_head.transformer.query_decoder._layers.1.transformer_layers.5.weight, map_head.transformer.query_decoder._layers.1.transformer_layers.5.bias, map_head.transformer.query_decoder._layers.2.transformer_layers.0.attn.in_proj_weight, map_head.transformer.query_decoder._layers.2.transformer_layers.0.attn.in_proj_bias, map_head.transformer.query_decoder._layers.2.transformer_layers.0.attn.out_proj.weight, map_head.transformer.query_decoder._layers.2.transformer_layers.0.attn.out_proj.bias, map_head.transformer.query_decoder._layers.2.transformer_layers.1.weight, map_head.transformer.query_decoder._layers.2.transformer_layers.1.bias, map_head.transformer.query_decoder._layers.2.transformer_layers.2.attn.in_proj_weight, map_head.transformer.query_decoder._layers.2.transformer_layers.2.attn.in_proj_bias, map_head.transformer.query_decoder._layers.2.transformer_layers.2.attn.out_proj.weight, map_head.transformer.query_decoder._layers.2.transformer_layers.2.attn.out_proj.bias, map_head.transformer.query_decoder._layers.2.transformer_layers.3.weight, map_head.transformer.query_decoder._layers.2.transformer_layers.3.bias, map_head.transformer.query_decoder._layers.2.transformer_layers.4._layers.0.weight, map_head.transformer.query_decoder._layers.2.transformer_layers.4._layers.0.bias, map_head.transformer.query_decoder._layers.2.transformer_layers.4._layers.3.weight, map_head.transformer.query_decoder._layers.2.transformer_layers.4._layers.3.bias, map_head.transformer.query_decoder._layers.2.transformer_layers.5.weight, map_head.transformer.query_decoder._layers.2.transformer_layers.5.bias, map_head.transformer.query_decoder._layers.3.transformer_layers.0.attn.in_proj_weight, map_head.transformer.query_decoder._layers.3.transformer_layers.0.attn.in_proj_bias, map_head.transformer.query_decoder._layers.3.transformer_layers.0.attn.out_proj.weight, map_head.transformer.query_decoder._layers.3.transformer_layers.0.attn.out_proj.bias, map_head.transformer.query_decoder._layers.3.transformer_layers.1.weight, map_head.transformer.query_decoder._layers.3.transformer_layers.1.bias, map_head.transformer.query_decoder._layers.3.transformer_layers.2.attn.in_proj_weight, map_head.transformer.query_decoder._layers.3.transformer_layers.2.attn.in_proj_bias, map_head.transformer.query_decoder._layers.3.transformer_layers.2.attn.out_proj.weight, map_head.transformer.query_decoder._layers.3.transformer_layers.2.attn.out_proj.bias, map_head.transformer.query_decoder._layers.3.transformer_layers.3.weight, map_head.transformer.query_decoder._layers.3.transformer_layers.3.bias, map_head.transformer.query_decoder._layers.3.transformer_layers.4._layers.0.weight, map_head.transformer.query_decoder._layers.3.transformer_layers.4._layers.0.bias, map_head.transformer.query_decoder._layers.3.transformer_layers.4._layers.3.weight, map_head.transformer.query_decoder._layers.3.transformer_layers.4._layers.3.bias, map_head.transformer.query_decoder._layers.3.transformer_layers.5.weight, map_head.transformer.query_decoder._layers.3.transformer_layers.5.bias, map_head.transformer.query_decoder._layers.4.transformer_layers.0.attn.in_proj_weight, map_head.transformer.query_decoder._layers.4.transformer_layers.0.attn.in_proj_bias, map_head.transformer.query_decoder._layers.4.transformer_layers.0.attn.out_proj.weight, map_head.transformer.query_decoder._layers.4.transformer_layers.0.attn.out_proj.bias, map_head.transformer.query_decoder._layers.4.transformer_layers.1.weight, map_head.transformer.query_decoder._layers.4.transformer_layers.1.bias, map_head.transformer.query_decoder._layers.4.transformer_layers.2.attn.in_proj_weight, map_head.transformer.query_decoder._layers.4.transformer_layers.2.attn.in_proj_bias, map_head.transformer.query_decoder._layers.4.transformer_layers.2.attn.out_proj.weight, map_head.transformer.query_decoder._layers.4.transformer_layers.2.attn.out_proj.bias, map_head.transformer.query_decoder._layers.4.transformer_layers.3.weight, map_head.transformer.query_decoder._layers.4.transformer_layers.3.bias, map_head.transformer.query_decoder._layers.4.transformer_layers.4._layers.0.weight, map_head.transformer.query_decoder._layers.4.transformer_layers.4._layers.0.bias, map_head.transformer.query_decoder._layers.4.transformer_layers.4._layers.3.weight, map_head.transformer.query_decoder._layers.4.transformer_layers.4._layers.3.bias, map_head.transformer.query_decoder._layers.4.transformer_layers.5.weight, map_head.transformer.query_decoder._layers.4.transformer_layers.5.bias, map_head.transformer.query_decoder._layers.5.transformer_layers.0.attn.in_proj_weight, map_head.transformer.query_decoder._layers.5.transformer_layers.0.attn.in_proj_bias, map_head.transformer.query_decoder._layers.5.transformer_layers.0.attn.out_proj.weight, map_head.transformer.query_decoder._layers.5.transformer_layers.0.attn.out_proj.bias, map_head.transformer.query_decoder._layers.5.transformer_layers.1.weight, map_head.transformer.query_decoder._layers.5.transformer_layers.1.bias, map_head.transformer.query_decoder._layers.5.transformer_layers.2.attn.in_proj_weight, map_head.transformer.query_decoder._layers.5.transformer_layers.2.attn.in_proj_bias, map_head.transformer.query_decoder._layers.5.transformer_layers.2.attn.out_proj.weight, map_head.transformer.query_decoder._layers.5.transformer_layers.2.attn.out_proj.bias, map_head.transformer.query_decoder._layers.5.transformer_layers.3.weight, map_head.transformer.query_decoder._layers.5.transformer_layers.3.bias, map_head.transformer.query_decoder._layers.5.transformer_layers.4._layers.0.weight, map_head.transformer.query_decoder._layers.5.transformer_layers.4._layers.0.bias, map_head.transformer.query_decoder._layers.5.transformer_layers.4._layers.3.weight, map_head.transformer.query_decoder._layers.5.transformer_layers.4._layers.3.bias, map_head.transformer.query_decoder._layers.5.transformer_layers.5.weight, map_head.transformer.query_decoder._layers.5.transformer_layers.5.bias, map_head.query_pos.0.weight, map_head.query_pos.0.bias, map_head.query_pos.2.weight, map_head.query_pos.2.bias, map_head.time_embedding.0.weight, map_head.time_embedding.0.bias, map_head.time_embedding.1.weight, map_head.time_embedding.1.bias, map_head.ego_pose_pe.reduce.0.weight, map_head.ego_pose_pe.reduce.0.bias, map_head.ego_pose_pe.gamma.weight, map_head.ego_pose_pe.gamma.bias, map_head.ego_pose_pe.beta.weight, map_head.ego_pose_pe.beta.bias, position_encoder.0.weight, position_encoder.0.bias, position_encoder.2.weight, position_encoder.2.bias

2025-03-02 00:03:15,252 - mmdet - INFO - Start running, host: mist_sophia@DESKTOP-FV3EM2A, work_dir: /home/mist_sophia/ad/test/OmniDrive/work_dirs/mask_eva_lane_det_vlm
2025-03-02 00:03:15,252 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(ABOVE_NORMAL) Fp16OptimizerHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) CustomDistEvalHook                 
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) CustomDistEvalHook                 
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(NORMAL      ) CustomDistEvalHook                 
(LOW         ) IterTimerHook                      
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) Fp16OptimizerHook                  
(NORMAL      ) CheckpointHook                     
(NORMAL      ) CustomDistEvalHook                 
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(NORMAL      ) CustomDistEvalHook                 
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
(VERY_LOW    ) TensorboardLoggerHook              
 -------------------- 
2025-03-02 00:03:15,252 - mmdet - INFO - workflow: [('train', 1)], max: 84390 iters
2025-03-02 00:03:15,254 - mmdet - INFO - Checkpoints will be saved to /home/mist_sophia/ad/test/OmniDrive/work_dirs/mask_eva_lane_det_vlm by HardDiskBackend.
2025-03-02 00:03:55,672 - mmdet - INFO - Iter [50/84390]	lr: 1.595e-04, eta: 18:53:04, time: 0.806, data_time: 0.035, memory: 9292, loss_cls: 2.2448, loss_bbox: 2.9891, d0.loss_cls: 2.2448, d0.loss_bbox: 2.9891, d1.loss_cls: 2.2448, d1.loss_bbox: 2.9891, d2.loss_cls: 2.2448, d2.loss_bbox: 2.9891, d3.loss_cls: 2.2448, d3.loss_bbox: 2.9891, d4.loss_cls: 2.2448, d4.loss_bbox: 2.9891, dn_loss_cls: 2.2090, dn_loss_bbox: 2.6744, d0.dn_loss_cls: 2.2090, d0.dn_loss_bbox: 2.6744, d1.dn_loss_cls: 2.2090, d1.dn_loss_bbox: 2.6744, d2.dn_loss_cls: 2.2090, d2.dn_loss_bbox: 2.6744, d3.dn_loss_cls: 2.2090, d3.dn_loss_bbox: 2.6744, d4.dn_loss_cls: 2.2090, d4.dn_loss_bbox: 2.6744, loss_cls_lane: 1.4766, loss_cls_H: 1.4766, loss_bbox_lane: 8.5934, loss_bbox_H: 8.5866, d0.loss_cls_lane: 1.4766, d0.loss_cls_H: 1.4766, d0.loss_bbox_lane: 8.5934, d0.loss_bbox_H: 8.5866, d1.loss_cls_lane: 1.4766, d1.loss_cls_H: 1.4766, d1.loss_bbox_lane: 8.5934, d1.loss_bbox_H: 8.5866, d2.loss_cls_lane: 1.4766, d2.loss_cls_H: 1.4766, d2.loss_bbox_lane: 8.5934, d2.loss_bbox_H: 8.5866, d3.loss_cls_lane: 1.4766, d3.loss_cls_H: 1.4766, d3.loss_bbox_lane: 8.5934, d3.loss_bbox_H: 8.5866, d4.loss_cls_lane: 1.4766, d4.loss_cls_H: 1.4766, d4.loss_bbox_lane: 8.5934, d4.loss_bbox_H: 8.5866, dummy_loss: 0.0000, loss: 181.5037, grad_norm: nan
2025-03-02 00:04:34,977 - mmdet - INFO - Iter [100/84390]	lr: 1.861e-04, eta: 18:38:22, time: 0.786, data_time: 0.026, memory: 9292, loss_cls: 2.2769, loss_bbox: 2.8994, d0.loss_cls: 2.2769, d0.loss_bbox: 2.8994, d1.loss_cls: 2.2769, d1.loss_bbox: 2.8994, d2.loss_cls: 2.2769, d2.loss_bbox: 2.8994, d3.loss_cls: 2.2769, d3.loss_bbox: 2.8994, d4.loss_cls: 2.2769, d4.loss_bbox: 2.8994, dn_loss_cls: 2.2410, dn_loss_bbox: 2.4665, d0.dn_loss_cls: 2.2410, d0.dn_loss_bbox: 2.4665, d1.dn_loss_cls: 2.2410, d1.dn_loss_bbox: 2.4665, d2.dn_loss_cls: 2.2410, d2.dn_loss_bbox: 2.4665, d3.dn_loss_cls: 2.2410, d3.dn_loss_bbox: 2.4665, d4.dn_loss_cls: 2.2410, d4.dn_loss_bbox: 2.4665, loss_cls_lane: 1.4766, loss_cls_H: 1.4766, loss_bbox_lane: 8.9081, loss_bbox_H: 8.9157, d0.loss_cls_lane: 1.4766, d0.loss_cls_H: 1.4766, d0.loss_bbox_lane: 8.9081, d0.loss_bbox_H: 8.9157, d1.loss_cls_lane: 1.4766, d1.loss_cls_H: 1.4766, d1.loss_bbox_lane: 8.9081, d1.loss_bbox_H: 8.9157, d2.loss_cls_lane: 1.4766, d2.loss_cls_H: 1.4766, d2.loss_bbox_lane: 8.9081, d2.loss_bbox_H: 8.9157, d3.loss_cls_lane: 1.4766, d3.loss_cls_H: 1.4766, d3.loss_bbox_lane: 8.9081, d3.loss_bbox_H: 8.9157, d4.loss_cls_lane: 1.4766, d4.loss_cls_H: 1.4766, d4.loss_bbox_lane: 8.9081, d4.loss_bbox_H: 8.9157, dummy_loss: 0.0000, loss: 183.9649, grad_norm: nan
2025-03-02 00:05:12,795 - mmdet - INFO - Iter [150/84390]	lr: 2.128e-04, eta: 18:19:07, time: 0.756, data_time: 0.023, memory: 9292, loss_cls: 2.2528, loss_bbox: 2.9969, d0.loss_cls: 2.2528, d0.loss_bbox: 2.9969, d1.loss_cls: 2.2528, d1.loss_bbox: 2.9969, d2.loss_cls: 2.2528, d2.loss_bbox: 2.9969, d3.loss_cls: 2.2528, d3.loss_bbox: 2.9969, d4.loss_cls: 2.2528, d4.loss_bbox: 2.9969, dn_loss_cls: 2.2432, dn_loss_bbox: 2.7251, d0.dn_loss_cls: 2.2432, d0.dn_loss_bbox: 2.7251, d1.dn_loss_cls: 2.2432, d1.dn_loss_bbox: 2.7251, d2.dn_loss_cls: 2.2432, d2.dn_loss_bbox: 2.7251, d3.dn_loss_cls: 2.2432, d3.dn_loss_bbox: 2.7251, d4.dn_loss_cls: 2.2432, d4.dn_loss_bbox: 2.7251, loss_cls_lane: 1.4766, loss_cls_H: 1.4766, loss_bbox_lane: 8.8025, loss_bbox_H: 8.7849, d0.loss_cls_lane: 1.4766, d0.loss_cls_H: 1.4766, d0.loss_bbox_lane: 8.8025, d0.loss_bbox_H: 8.7849, d1.loss_cls_lane: 1.4766, d1.loss_cls_H: 1.4766, d1.loss_bbox_lane: 8.8025, d1.loss_bbox_H: 8.7849, d2.loss_cls_lane: 1.4766, d2.loss_cls_H: 1.4766, d2.loss_bbox_lane: 8.8025, d2.loss_bbox_H: 8.7849, d3.loss_cls_lane: 1.4766, d3.loss_cls_H: 1.4766, d3.loss_bbox_lane: 8.8025, d3.loss_bbox_H: 8.7849, d4.loss_cls_lane: 1.4766, d4.loss_cls_H: 1.4766, d4.loss_bbox_lane: 8.8025, d4.loss_bbox_H: 8.7849, dummy_loss: 0.0000, loss: 184.5515, grad_norm: nan
2025-03-02 00:05:50,334 - mmdet - INFO - Iter [200/84390]	lr: 2.395e-04, eta: 18:07:12, time: 0.751, data_time: 0.023, memory: 9292, loss_cls: 2.2922, loss_bbox: 2.8172, d0.loss_cls: 2.2922, d0.loss_bbox: 2.8172, d1.loss_cls: 2.2922, d1.loss_bbox: 2.8172, d2.loss_cls: 2.2922, d2.loss_bbox: 2.8172, d3.loss_cls: 2.2922, d3.loss_bbox: 2.8172, d4.loss_cls: 2.2922, d4.loss_bbox: 2.8172, dn_loss_cls: 2.2872, dn_loss_bbox: 2.5135, d0.dn_loss_cls: 2.2872, d0.dn_loss_bbox: 2.5135, d1.dn_loss_cls: 2.2872, d1.dn_loss_bbox: 2.5135, d2.dn_loss_cls: 2.2872, d2.dn_loss_bbox: 2.5135, d3.dn_loss_cls: 2.2872, d3.dn_loss_bbox: 2.5135, d4.dn_loss_cls: 2.2872, d4.dn_loss_bbox: 2.5135, loss_cls_lane: 1.4767, loss_cls_H: 1.4767, loss_bbox_lane: 8.8646, loss_bbox_H: 8.8674, d0.loss_cls_lane: 1.4767, d0.loss_cls_H: 1.4767, d0.loss_bbox_lane: 8.8646, d0.loss_bbox_H: 8.8674, d1.loss_cls_lane: 1.4767, d1.loss_cls_H: 1.4767, d1.loss_bbox_lane: 8.8646, d1.loss_bbox_H: 8.8674, d2.loss_cls_lane: 1.4767, d2.loss_cls_H: 1.4767, d2.loss_bbox_lane: 8.8646, d2.loss_bbox_H: 8.8674, d3.loss_cls_lane: 1.4767, d3.loss_cls_H: 1.4767, d3.loss_bbox_lane: 8.8646, d3.loss_bbox_H: 8.8674, d4.loss_cls_lane: 1.4767, d4.loss_cls_H: 1.4767, d4.loss_bbox_lane: 8.8646, d4.loss_bbox_H: 8.8674, dummy_loss: 0.0000, loss: 183.5726, grad_norm: nan
2025-03-02 00:06:29,911 - mmdet - INFO - Iter [250/84390]	lr: 2.661e-04, eta: 18:11:15, time: 0.792, data_time: 0.025, memory: 9292, loss_cls: 2.3093, loss_bbox: 2.9089, d0.loss_cls: 2.3093, d0.loss_bbox: 2.9089, d1.loss_cls: 2.3093, d1.loss_bbox: 2.9089, d2.loss_cls: 2.3093, d2.loss_bbox: 2.9089, d3.loss_cls: 2.3093, d3.loss_bbox: 2.9089, d4.loss_cls: 2.3093, d4.loss_bbox: 2.9089, dn_loss_cls: 2.2877, dn_loss_bbox: 2.5033, d0.dn_loss_cls: 2.2877, d0.dn_loss_bbox: 2.5033, d1.dn_loss_cls: 2.2877, d1.dn_loss_bbox: 2.5033, d2.dn_loss_cls: 2.2877, d2.dn_loss_bbox: 2.5033, d3.dn_loss_cls: 2.2877, d3.dn_loss_bbox: 2.5033, d4.dn_loss_cls: 2.2877, d4.dn_loss_bbox: 2.5033, loss_cls_lane: 1.4766, loss_cls_H: 1.4766, loss_bbox_lane: 8.8138, loss_bbox_H: 8.8012, d0.loss_cls_lane: 1.4766, d0.loss_cls_H: 1.4766, d0.loss_bbox_lane: 8.8138, d0.loss_bbox_H: 8.8012, d1.loss_cls_lane: 1.4766, d1.loss_cls_H: 1.4766, d1.loss_bbox_lane: 8.8138, d1.loss_bbox_H: 8.8012, d2.loss_cls_lane: 1.4766, d2.loss_cls_H: 1.4766, d2.loss_bbox_lane: 8.8138, d2.loss_bbox_H: 8.8012, d3.loss_cls_lane: 1.4766, d3.loss_cls_H: 1.4766, d3.loss_bbox_lane: 8.8138, d3.loss_bbox_H: 8.8012, d4.loss_cls_lane: 1.4766, d4.loss_cls_H: 1.4766, d4.loss_bbox_lane: 8.8138, d4.loss_bbox_H: 8.8012, dummy_loss: 0.0000, loss: 183.4640, grad_norm: nan
2025-03-02 00:07:08,805 - mmdet - INFO - Iter [300/84390]	lr: 2.928e-04, eta: 18:10:32, time: 0.778, data_time: 0.024, memory: 9292, loss_cls: 2.3219, loss_bbox: 2.9888, d0.loss_cls: 2.3219, d0.loss_bbox: 2.9888, d1.loss_cls: 2.3219, d1.loss_bbox: 2.9888, d2.loss_cls: 2.3219, d2.loss_bbox: 2.9888, d3.loss_cls: 2.3219, d3.loss_bbox: 2.9888, d4.loss_cls: 2.3219, d4.loss_bbox: 2.9888, dn_loss_cls: 2.3227, dn_loss_bbox: 2.5300, d0.dn_loss_cls: 2.3227, d0.dn_loss_bbox: 2.5300, d1.dn_loss_cls: 2.3227, d1.dn_loss_bbox: 2.5300, d2.dn_loss_cls: 2.3227, d2.dn_loss_bbox: 2.5300, d3.dn_loss_cls: 2.3227, d3.dn_loss_bbox: 2.5300, d4.dn_loss_cls: 2.3227, d4.dn_loss_bbox: 2.5300, loss_cls_lane: 1.4766, loss_cls_H: 1.4766, loss_bbox_lane: 8.6902, loss_bbox_H: 8.7251, d0.loss_cls_lane: 1.4766, d0.loss_cls_H: 1.4766, d0.loss_bbox_lane: 8.6902, d0.loss_bbox_H: 8.7251, d1.loss_cls_lane: 1.4766, d1.loss_cls_H: 1.4766, d1.loss_bbox_lane: 8.6902, d1.loss_bbox_H: 8.7251, d2.loss_cls_lane: 1.4766, d2.loss_cls_H: 1.4766, d2.loss_bbox_lane: 8.6902, d2.loss_bbox_H: 8.7251, d3.loss_cls_lane: 1.4766, d3.loss_cls_H: 1.4766, d3.loss_bbox_lane: 8.6902, d3.loss_bbox_H: 8.7251, d4.loss_cls_lane: 1.4766, d4.loss_cls_H: 1.4766, d4.loss_bbox_lane: 8.6902, d4.loss_bbox_H: 8.7251, dummy_loss: 0.0000, loss: 183.1922, grad_norm: nan
2025-03-02 00:07:48,179 - mmdet - INFO - Iter [350/84390]	lr: 3.195e-04, eta: 18:11:45, time: 0.787, data_time: 0.024, memory: 9292, loss_cls: 2.3114, loss_bbox: 2.9416, d0.loss_cls: 2.3114, d0.loss_bbox: 2.9416, d1.loss_cls: 2.3114, d1.loss_bbox: 2.9416, d2.loss_cls: 2.3114, d2.loss_bbox: 2.9416, d3.loss_cls: 2.3114, d3.loss_bbox: 2.9416, d4.loss_cls: 2.3114, d4.loss_bbox: 2.9416, dn_loss_cls: 2.3451, dn_loss_bbox: 2.5653, d0.dn_loss_cls: 2.3451, d0.dn_loss_bbox: 2.5653, d1.dn_loss_cls: 2.3451, d1.dn_loss_bbox: 2.5653, d2.dn_loss_cls: 2.3451, d2.dn_loss_bbox: 2.5653, d3.dn_loss_cls: 2.3451, d3.dn_loss_bbox: 2.5653, d4.dn_loss_cls: 2.3451, d4.dn_loss_bbox: 2.5653, loss_cls_lane: 1.4766, loss_cls_H: 1.4766, loss_bbox_lane: 8.8066, loss_bbox_H: 8.8102, d0.loss_cls_lane: 1.4766, d0.loss_cls_H: 1.4766, d0.loss_bbox_lane: 8.8066, d0.loss_bbox_H: 8.8102, d1.loss_cls_lane: 1.4766, d1.loss_cls_H: 1.4766, d1.loss_bbox_lane: 8.8066, d1.loss_bbox_H: 8.8102, d2.loss_cls_lane: 1.4766, d2.loss_cls_H: 1.4766, d2.loss_bbox_lane: 8.8066, d2.loss_bbox_H: 8.8102, d3.loss_cls_lane: 1.4766, d3.loss_cls_H: 1.4766, d3.loss_bbox_lane: 8.8066, d3.loss_bbox_H: 8.8102, d4.loss_cls_lane: 1.4766, d4.loss_cls_H: 1.4766, d4.loss_bbox_lane: 8.8066, d4.loss_bbox_H: 8.8102, dummy_loss: 0.0000, loss: 184.4011, grad_norm: nan
2025-03-02 00:08:26,720 - mmdet - INFO - Iter [400/84390]	lr: 3.461e-04, eta: 18:09:35, time: 0.771, data_time: 0.025, memory: 9292, loss_cls: 2.2587, loss_bbox: 2.9842, d0.loss_cls: 2.2587, d0.loss_bbox: 2.9842, d1.loss_cls: 2.2587, d1.loss_bbox: 2.9842, d2.loss_cls: 2.2587, d2.loss_bbox: 2.9842, d3.loss_cls: 2.2587, d3.loss_bbox: 2.9842, d4.loss_cls: 2.2587, d4.loss_bbox: 2.9842, dn_loss_cls: 2.2796, dn_loss_bbox: 2.7068, d0.dn_loss_cls: 2.2796, d0.dn_loss_bbox: 2.7068, d1.dn_loss_cls: 2.2796, d1.dn_loss_bbox: 2.7068, d2.dn_loss_cls: 2.2796, d2.dn_loss_bbox: 2.7068, d3.dn_loss_cls: 2.2796, d3.dn_loss_bbox: 2.7068, d4.dn_loss_cls: 2.2796, d4.dn_loss_bbox: 2.7068, loss_cls_lane: 1.4766, loss_cls_H: 1.4766, loss_bbox_lane: 8.7895, loss_bbox_H: 8.7856, d0.loss_cls_lane: 1.4766, d0.loss_cls_H: 1.4766, d0.loss_bbox_lane: 8.7895, d0.loss_bbox_H: 8.7856, d1.loss_cls_lane: 1.4766, d1.loss_cls_H: 1.4766, d1.loss_bbox_lane: 8.7895, d1.loss_bbox_H: 8.7856, d2.loss_cls_lane: 1.4766, d2.loss_cls_H: 1.4766, d2.loss_bbox_lane: 8.7895, d2.loss_bbox_H: 8.7856, d3.loss_cls_lane: 1.4766, d3.loss_cls_H: 1.4766, d3.loss_bbox_lane: 8.7895, d3.loss_bbox_H: 8.7856, d4.loss_cls_lane: 1.4766, d4.loss_cls_H: 1.4766, d4.loss_bbox_lane: 8.7895, d4.loss_bbox_H: 8.7856, dummy_loss: 0.0000, loss: 184.5450, grad_norm: nan
2025-03-02 00:09:05,427 - mmdet - INFO - Iter [450/84390]	lr: 3.728e-04, eta: 18:08:17, time: 0.774, data_time: 0.025, memory: 9292, loss_cls: 2.2719, loss_bbox: 3.0833, d0.loss_cls: 2.2719, d0.loss_bbox: 3.0833, d1.loss_cls: 2.2719, d1.loss_bbox: 3.0833, d2.loss_cls: 2.2719, d2.loss_bbox: 3.0833, d3.loss_cls: 2.2719, d3.loss_bbox: 3.0833, d4.loss_cls: 2.2719, d4.loss_bbox: 3.0833, dn_loss_cls: 2.2533, dn_loss_bbox: 2.7954, d0.dn_loss_cls: 2.2533, d0.dn_loss_bbox: 2.7954, d1.dn_loss_cls: 2.2533, d1.dn_loss_bbox: 2.7954, d2.dn_loss_cls: 2.2533, d2.dn_loss_bbox: 2.7954, d3.dn_loss_cls: 2.2533, d3.dn_loss_bbox: 2.7954, d4.dn_loss_cls: 2.2533, d4.dn_loss_bbox: 2.7954, loss_cls_lane: 1.4766, loss_cls_H: 1.4766, loss_bbox_lane: 8.8736, loss_bbox_H: 8.8663, d0.loss_cls_lane: 1.4766, d0.loss_cls_H: 1.4766, d0.loss_bbox_lane: 8.8736, d0.loss_bbox_H: 8.8663, d1.loss_cls_lane: 1.4766, d1.loss_cls_H: 1.4766, d1.loss_bbox_lane: 8.8736, d1.loss_bbox_H: 8.8663, d2.loss_cls_lane: 1.4766, d2.loss_cls_H: 1.4766, d2.loss_bbox_lane: 8.8736, d2.loss_bbox_H: 8.8663, d3.loss_cls_lane: 1.4766, d3.loss_cls_H: 1.4766, d3.loss_bbox_lane: 8.8736, d3.loss_bbox_H: 8.8663, d4.loss_cls_lane: 1.4766, d4.loss_cls_H: 1.4766, d4.loss_bbox_lane: 8.8736, d4.loss_bbox_H: 8.8663, dummy_loss: 0.0000, loss: 186.5825, grad_norm: nan
2025-03-02 00:09:46,380 - mmdet - INFO - Iter [500/84390]	lr: 3.994e-04, eta: 18:13:23, time: 0.819, data_time: 0.024, memory: 9292, loss_cls: 2.2864, loss_bbox: 3.0473, d0.loss_cls: 2.2864, d0.loss_bbox: 3.0473, d1.loss_cls: 2.2864, d1.loss_bbox: 3.0473, d2.loss_cls: 2.2864, d2.loss_bbox: 3.0473, d3.loss_cls: 2.2864, d3.loss_bbox: 3.0473, d4.loss_cls: 2.2864, d4.loss_bbox: 3.0473, dn_loss_cls: 2.2894, dn_loss_bbox: 2.6106, d0.dn_loss_cls: 2.2894, d0.dn_loss_bbox: 2.6106, d1.dn_loss_cls: 2.2894, d1.dn_loss_bbox: 2.6106, d2.dn_loss_cls: 2.2894, d2.dn_loss_bbox: 2.6106, d3.dn_loss_cls: 2.2894, d3.dn_loss_bbox: 2.6106, d4.dn_loss_cls: 2.2894, d4.dn_loss_bbox: 2.6106, loss_cls_lane: 1.4766, loss_cls_H: 1.4766, loss_bbox_lane: 8.7568, loss_bbox_H: 8.7342, d0.loss_cls_lane: 1.4766, d0.loss_cls_H: 1.4766, d0.loss_bbox_lane: 8.7568, d0.loss_bbox_H: 8.7342, d1.loss_cls_lane: 1.4766, d1.loss_cls_H: 1.4766, d1.loss_bbox_lane: 8.7568, d1.loss_bbox_H: 8.7342, d2.loss_cls_lane: 1.4766, d2.loss_cls_H: 1.4766, d2.loss_bbox_lane: 8.7568, d2.loss_bbox_H: 8.7342, d3.loss_cls_lane: 1.4766, d3.loss_cls_H: 1.4766, d3.loss_bbox_lane: 8.7568, d3.loss_bbox_H: 8.7342, d4.loss_cls_lane: 1.4766, d4.loss_cls_H: 1.4766, d4.loss_bbox_lane: 8.7568, d4.loss_bbox_H: 8.7342, dummy_loss: 0.0000, loss: 184.0680, grad_norm: nan
2025-03-02 00:10:25,026 - mmdet - INFO - Iter [550/84390]	lr: 4.000e-04, eta: 18:11:35, time: 0.773, data_time: 0.025, memory: 9292, loss_cls: 2.2389, loss_bbox: 2.9819, d0.loss_cls: 2.2389, d0.loss_bbox: 2.9819, d1.loss_cls: 2.2389, d1.loss_bbox: 2.9819, d2.loss_cls: 2.2389, d2.loss_bbox: 2.9819, d3.loss_cls: 2.2389, d3.loss_bbox: 2.9819, d4.loss_cls: 2.2389, d4.loss_bbox: 2.9819, dn_loss_cls: 2.2134, dn_loss_bbox: 2.6002, d0.dn_loss_cls: 2.2134, d0.dn_loss_bbox: 2.6002, d1.dn_loss_cls: 2.2134, d1.dn_loss_bbox: 2.6002, d2.dn_loss_cls: 2.2134, d2.dn_loss_bbox: 2.6002, d3.dn_loss_cls: 2.2134, d3.dn_loss_bbox: 2.6002, d4.dn_loss_cls: 2.2134, d4.dn_loss_bbox: 2.6002, loss_cls_lane: 1.4766, loss_cls_H: 1.4766, loss_bbox_lane: 8.7449, loss_bbox_H: 8.7676, d0.loss_cls_lane: 1.4766, d0.loss_cls_H: 1.4766, d0.loss_bbox_lane: 8.7449, d0.loss_bbox_H: 8.7676, d1.loss_cls_lane: 1.4766, d1.loss_cls_H: 1.4766, d1.loss_bbox_lane: 8.7449, d1.loss_bbox_H: 8.7676, d2.loss_cls_lane: 1.4766, d2.loss_cls_H: 1.4766, d2.loss_bbox_lane: 8.7449, d2.loss_bbox_H: 8.7676, d3.loss_cls_lane: 1.4766, d3.loss_cls_H: 1.4766, d3.loss_bbox_lane: 8.7449, d3.loss_bbox_H: 8.7676, d4.loss_cls_lane: 1.4766, d4.loss_cls_H: 1.4766, d4.loss_bbox_lane: 8.7449, d4.loss_bbox_H: 8.7676, dummy_loss: 0.0000, loss: 183.0006, grad_norm: nan
2025-03-02 00:11:05,019 - mmdet - INFO - Iter [600/84390]	lr: 4.000e-04, eta: 18:13:06, time: 0.800, data_time: 0.025, memory: 9307, loss_cls: 2.2668, loss_bbox: 2.9066, d0.loss_cls: 2.2668, d0.loss_bbox: 2.9066, d1.loss_cls: 2.2668, d1.loss_bbox: 2.9066, d2.loss_cls: 2.2668, d2.loss_bbox: 2.9066, d3.loss_cls: 2.2668, d3.loss_bbox: 2.9066, d4.loss_cls: 2.2668, d4.loss_bbox: 2.9066, dn_loss_cls: 2.2737, dn_loss_bbox: 2.5197, d0.dn_loss_cls: 2.2737, d0.dn_loss_bbox: 2.5197, d1.dn_loss_cls: 2.2737, d1.dn_loss_bbox: 2.5197, d2.dn_loss_cls: 2.2737, d2.dn_loss_bbox: 2.5197, d3.dn_loss_cls: 2.2737, d3.dn_loss_bbox: 2.5197, d4.dn_loss_cls: 2.2737, d4.dn_loss_bbox: 2.5197, loss_cls_lane: 1.4766, loss_cls_H: 1.4766, loss_bbox_lane: 8.8442, loss_bbox_H: 8.8452, d0.loss_cls_lane: 1.4766, d0.loss_cls_H: 1.4766, d0.loss_bbox_lane: 8.8442, d0.loss_bbox_H: 8.8452, d1.loss_cls_lane: 1.4766, d1.loss_cls_H: 1.4766, d1.loss_bbox_lane: 8.8442, d1.loss_bbox_H: 8.8452, d2.loss_cls_lane: 1.4766, d2.loss_cls_H: 1.4766, d2.loss_bbox_lane: 8.8442, d2.loss_bbox_H: 8.8452, d3.loss_cls_lane: 1.4766, d3.loss_cls_H: 1.4766, d3.loss_bbox_lane: 8.8442, d3.loss_bbox_H: 8.8452, d4.loss_cls_lane: 1.4766, d4.loss_cls_H: 1.4766, d4.loss_bbox_lane: 8.8442, d4.loss_bbox_H: 8.8452, dummy_loss: 0.0000, loss: 183.6567, grad_norm: nan
